{
	"info": {
		"_postman_id": "d508bc02-2e47-4e01-8407-d3615e305025",
		"name": "DISCO",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disco-token\", responseData[\"accessToken\"]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "45b5f0bf-3b39-4254-9255-b3dab17b0056",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"rikkuvotre@necub.com\",\n    \"password\": \"Password@4\"\n}\n\n// {\n//    \"username\": \"emediongetuk323@gmail.com\",\n//     \"password\": \"1234\"\n// }",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "f03f9138-d274-4407-bb2b-0cf2ad385b99",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Invalid Authorize Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "33c47d1b-c0e1-46e6-ac75-1083613321aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"g\",\n    \"password\": \"Tester@123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "eb273285-66e3-4983-bbee-0227f2e94753",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Invalid Authorize password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "850f8715-e048-4714-a3ef-95e49096f1c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"T\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "240ae8b0-f106-47d6-93bf-58519768961b",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "de0ab91d-c4c6-4b42-a55e-caf04c780a03",
			"description": "This endpoint return bearer token, which must be bind to the request for all others request"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2970e671-729b-4274-a10e-453324738aee",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validate response structure and values\", () => {",
									"",
									"    // Top-level checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"responsecode\", 200);",
									"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Data object should exist",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"  ",
									"});",
									"",
									"pm.test(\"Validate response user dataTypes\", () => {",
									"    pm.expect(jsonData.data).to.have.property(\"fullname\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"username\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"roles\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data.canwrite).to.be.true;",
									"    pm.expect(jsonData.data.lockstatus).to.be.false;",
									"});",
									"",
									"pm.test(\"Validate inroles and roles\", () => {",
									"    pm.expect(jsonData.data.inroles).to.eql(\"DISCOs\");",
									"    pm.expect(jsonData.data.roles).to.eql(\"Group Admin\")|| pm.expect(jsonData.data.roles).to.eql(\"Admin\") ;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fe184412-d323-4a9d-907c-3af680aa1698",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"rikkuvotre@necub.com\",\n    \"password\": \"Password@4\"\n}\n// {   \"username\": \"doridisco@yopmail.com\"\",\n//     \"password\": \"Tester@123\"\n// }",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "e3bef322-4d27-40b3-9ddc-2c80ccec8871",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Invalid login pwd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validate response structure and values\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Common field checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"data\", null);",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Conditional checks",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
									"    } else if (jsonData.responsecode === 301) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
									"    } else {",
									"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
									"    }",
									"",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "019a5aa0-025f-4364-aee8-9ba90be99980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@13\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "295314ef-4e86-49e7-965e-c3ae0c829efd",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Invalid login username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validate response structure and values\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Common field checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"data\", null);",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Conditional checks",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
									"    } else if (jsonData.responsecode === 301) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
									"    } else {",
									"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
									"    }",
									"",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0bfef863-91eb-435e-85e8-28c39b97998d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilm@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "0e81d04a-7d98-4eda-9bc5-b9658e2fdf4e",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Empty login Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validation Error Response\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(400);",
									"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");",
									"",
									"    if (jsonData.errors.password) {",
									"        pm.expect(jsonData.errors.password).to.include(\"The password field is required.\");",
									"    }",
									"    if (jsonData.errors.username) {",
									"        pm.expect(jsonData.errors.username).to.include(\"The username field is required.\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ba331994-610b-4c72-9239-dee6c99ebf01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \" \",\n    \"password\": \" \"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "b44bbcf8-839b-43a7-87b4-2873cf3e2f0f",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				}
			],
			"id": "bcdfc39e-34e4-48a0-ac61-d8693d0f4a70",
			"description": "Use this endpoint for user login.\n\nThis endpoint return user object upon successful login"
		},
		{
			"name": "Verify Security Code",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{code}",
							"item": [
								{
									"name": "verify account code",
									"id": "b9adbf87-d3fd-415c-bd81-c4ac3fc75fee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/authentication/verifyaccountcode/:data/:code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"authentication",
												"verifyaccountcode",
												":data",
												":code"
											],
											"variable": [
												{
													"id": "21338297-b105-4851-9be3-0a1ffc4dacfc",
													"key": "data",
													"value": "string",
													"description": "(Required) "
												},
												{
													"id": "988a2480-9104-4c9b-a745-05cb692f6f82",
													"key": "code",
													"value": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "2e5e938c-e1f0-4c51-973d-51d932289513",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/authentication/verifyaccountcode/:data/:code",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"authentication",
														"verifyaccountcode",
														":data",
														":code"
													],
													"variable": [
														{
															"key": "data"
														},
														{
															"key": "code"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "24dbbc57-3c9a-46f2-b3a9-6366aa8469c0"
						}
					],
					"id": "18980cae-99a4-42fb-a9ac-677b66cb2a8c"
				}
			],
			"id": "f62bea54-ff2d-49d3-b21f-adab410fe90c"
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Contract quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "msquickcontract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4a4375a-f939-4cdd-8ce3-f9379b37ae8a",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
													"",
													"// Validate responsecode",
													"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
													"",
													"// Validate responsStatus",
													"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
													"",
													"// Validate data is an object",
													"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
													"",
													"// Validate fields in data",
													"pm.test(\"Validate totalmeter is a number\", () => pm.expect(jsonData.data.totalmeter).to.be.a(\"number\"));",
													"pm.test(\"Validate meter is a number\", () => pm.expect(jsonData.data.meter).to.be.a(\"number\"));",
													"pm.test(\"Validate certified is a number\", () => pm.expect(jsonData.data.certified).to.be.a(\"number\"));",
													"pm.test(\"Validate pending is a number\", () => pm.expect(jsonData.data.prnding).to.be.a(\"number\"));",
													"",
													"// Validate pagination fields",
													"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
													"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a163df97-8163-4995-9286-572f9f2c7349",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/operations/msquickcontract/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"operations",
												"msquickcontract",
												":data"
											],
											"variable": [
												{
													"id": "fc06f304-b68d-4eda-b2cd-8caba86e9dee",
													"key": "data",
													"value": "Mita",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "7ea809c9-2a91-4499-b94b-96255df89038",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/msquickcontract/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"msquickcontract",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3936,\n  \"responsecode\": 3646,\n  \"data\": {\n    \"totalmeter\": 2367,\n    \"meter\": 2951,\n    \"certified\": 2697,\n    \"prnding\": 4571\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 562,\n  \"currentpage\": 9674\n}"
										}
									]
								}
							],
							"id": "a51e6dce-572e-4fc9-9ad2-6b1efee57bb0",
							"description": "Vendor ID"
						}
					],
					"id": "fdfe3e2f-b317-464b-87ad-2bfac725a089"
				},
				{
					"name": "get notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14673d56-ca1a-4d90-a6f7-e79cf4f60234",
								"exec": [
									"// Parse response",
									"const jsonData = pm.response.json();",
									"",
									"// Test status code is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test data object exists",
									"pm.test(\"Data object exists\", () => {",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"});",
									"",
									"// Test counters exist and are numbers",
									"[\"total\", \"read\", \"unread\", \"archived\"].forEach(key => {",
									"    pm.test(`${key} exists and is a number`, () => {",
									"        pm.expect(jsonData.data).to.have.property(key);",
									"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
									"    });",
									"});",
									"",
									"// Test all counters are >= 0",
									"pm.test(\"Counters are non-negative\", () => {",
									"    pm.expect(jsonData.data.total).to.be.at.least(0);",
									"    pm.expect(jsonData.data.read).to.be.at.least(0);",
									"    pm.expect(jsonData.data.unread).to.be.at.least(0);",
									"    pm.expect(jsonData.data.archived).to.be.at.least(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8f9ade6-fe69-4544-b779-6db80e87a3ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "origin",
								"value": "https://primes.omniswift.com"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://primes.omniswift.com/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
							}
						],
						"url": "{{baseUrl}}/api/operations/notifications/{{disco}}"
					},
					"response": []
				}
			],
			"id": "9af45d7d-48f2-4061-a358-d369a173722b"
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Quick Overview",
					"item": [
						{
							"name": "{disco}",
							"item": [
								{
									"name": "disco schedule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e779f686-dc8a-4334-80e3-e92f626fa144",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate top-level keys",
													"pm.test(\"Response contains all required keys\", () => {",
													"    pm.expect(jsonData).to.have.keys([",
													"        \"cc\",",
													"        \"responsecode\",",
													"        \"data\",",
													"        \"responsemessage\",",
													"        \"patterns\",",
													"        \"responsStatus\",",
													"        \"totalpage\",",
													"        \"currentpage\"",
													"    ]);",
													"});",
													"",
													"// Validate responsecode is 200",
													"pm.test(\"responsecode is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data object fields",
													"pm.test(\"Data fields are numbers\", () => {",
													"    const fields = [",
													"        \"total_schedule\",",
													"        \"pending_meter\",",
													"        \"meter_received\",",
													"        \"single\",",
													"        \"three\",",
													"        \"assigned_meters\",",
													"        \"assigned_single\",",
													"        \"assigned_three\",",
													"        \"total_meter\"",
													"    ];",
													"    fields.forEach(field => {",
													"        pm.expect(jsonData.data[field]).to.be.a(\"number\");",
													"    });",
													"});",
													"",
													"// Validate responsemessage is a string",
													"pm.test(\"responsemessage is a string\", () => {",
													"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
													"});",
													"",
													"// Validate pagination fields are numbers",
													"pm.test(\"Pagination fields are numbers\", () => {",
													"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
													"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "54236b71-a7dd-4405-bec4-d04db843d56c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/discoscheduledash/:disco",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"discoscheduledash",
												":disco"
											],
											"variable": [
												{
													"key": "disco",
													"value": "{{disco}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "18d5f438-4051-4a58-a1d0-979ef1631401",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/discoscheduledash/:disco",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"discoscheduledash",
														":disco"
													],
													"variable": [
														{
															"key": "disco"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 5378,\n  \"responsecode\": 4002,\n  \"data\": {\n    \"total_schedule\": 7978,\n    \"pending_meter\": 8310,\n    \"meter_received\": 6045,\n    \"single\": 8825,\n    \"three\": 1648,\n    \"assigned_meters\": 5613,\n    \"assigned_single\": 3579,\n    \"assigned_three\": 9475,\n    \"total_meter\": 7093\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 1570,\n  \"currentpage\": 7206\n}"
										}
									]
								}
							],
							"id": "512ae504-a3ca-467d-b2d8-65d9d3b44422"
						}
					],
					"id": "178f798b-d73f-44c6-8b80-59699ff5cef2",
					"description": "Use this endpoint where there is contract table"
				},
				{
					"name": "DISCO Installation Quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "discoinstalledstack",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "766be31b-af47-4cef-9380-ae7f58fe2762",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate top-level keys",
													"pm.test(\"Response contains all required keys\", () => {",
													"    pm.expect(jsonData).to.have.keys([",
													"        \"cc\",",
													"        \"responsecode\",",
													"        \"data\",",
													"        \"responsemessage\",",
													"        \"patterns\",",
													"        \"responsStatus\",",
													"        \"totalpage\",",
													"        \"currentpage\"",
													"    ]);",
													"});",
													"",
													"// Validate responsecode is 200",
													"pm.test(\"responsecode is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data can be null",
													"pm.test(\"data is null or object/array\", () => {",
													"    pm.expect(jsonData.data === null || typeof jsonData.data === \"object\").to.be.true;",
													"});",
													"",
													"// Validate responsemessage is a string",
													"pm.test(\"responsemessage is a string\", () => {",
													"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
													"});",
													"",
													"// Validate pagination fields are numbers",
													"pm.test(\"Pagination fields are numbers\", () => {",
													"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
													"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "061ab70b-b0b9-4d8d-a036-40775ee8b838",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/discoinstalledstack/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"discoinstalledstack",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "{{disco}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "5c9a98b3-1501-424d-985f-225f48c72995",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/discoinstalledstack/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"discoinstalledstack",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2835,\n  \"responsecode\": 7799,\n  \"data\": {\n    \"totalmeterinstalled\": 5201,\n    \"totalmetersupplier\": 7674,\n    \"singleinstalled\": 8072,\n    \"threeinstalled\": 1323,\n    \"totalinventory\": 2171,\n    \"singleinventory\": 7155,\n    \"threeinventory\": 5738,\n    \"customerpending\": 2781,\n    \"customersingle\": 4439,\n    \"customerthree\": 5919,\n    \"totalenergy\": 9541\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 7428,\n  \"currentpage\": 880\n}"
										}
									]
								}
							],
							"id": "6e95909e-1bb4-4a08-83dc-9b6f6841ed81",
							"description": "DISCO\n\n\\--see disco list"
						}
					],
					"id": "a9fad6dd-4fc8-42d3-89c4-82b2e90e11a5",
					"description": "This endpoint return Installation quick overview\n\nTotal engineers, number of signle and three phase meters"
				},
				{
					"name": "Get Installation Location set",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "/api/customers/getlocation/:data/:offset/:limit",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e146f217-ae71-4ada-a9b6-c5033ab91dbd",
																"exec": [
																	"// Parse response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate responsecode",
																	"pm.test(\"responsecode is 200\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate responsStatus",
																	"pm.test(\"responsStatus is true\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate each item has required keys",
																	"pm.test(\"each location object has required keys\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.keys([\"id\", \"disco\", \"location\"]);",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.location).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	"// Validate pagination fields are numbers",
																	"pm.test(\"Pagination fields are numbers\", () => {",
																	"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
																	"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
																	"});",
																	"",
																	"// Validate responsemessage is a string",
																	"pm.test(\"responsemessage is a string\", () => {",
																	"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "e02a231a-1b41-4a0b-baf5-ece53fdba7e8",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/getlocation/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"getlocation",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "8e6b37e1-a834-47d8-9643-18223b094a4c",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/getlocation/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"getlocation",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 9800,\n  \"responsecode\": 3862,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"location\": \"string\",\n      \"id\": 3539\n    },\n    {\n      \"disco\": \"string\",\n      \"location\": \"string\",\n      \"id\": 3938\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9552,\n  \"currentpage\": 4131\n}"
														}
													]
												}
											],
											"id": "c46abcd0-ad8b-4cdc-bb4e-1218867f644e"
										}
									],
									"id": "f10f0acd-33d3-4d55-b45f-b2d84fc9baa7"
								},
								{
									"name": "get customer location",
									"id": "af6013ac-8e71-421f-8b99-1210ebaf9090",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/getlocation/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"getlocation",
												":data"
											],
											"variable": [
												{
													"id": "39f45b56-f9ac-4861-b0ef-3f6815fa9233",
													"key": "data",
													"value": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "8bae4e66-3c06-4ca7-939d-492074453d78",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/getlocation/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"getlocation",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 9800,\n  \"responsecode\": 3862,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"location\": \"string\",\n      \"id\": 3539\n    },\n    {\n      \"disco\": \"string\",\n      \"location\": \"string\",\n      \"id\": 3938\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9552,\n  \"currentpage\": 4131\n}"
										}
									]
								}
							],
							"id": "7cde28b1-1eb7-4051-9f99-7b9aea54f2b5",
							"description": "disco\n\n\\--see disco list"
						}
					],
					"id": "836fb073-2281-4828-a931-8d027529106e",
					"description": "This endpoint return Installation location by each DISCO"
				},
				{
					"name": "Asset Folder",
					"item": [
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74a81c3-cb31-4832-a018-e89709d1334d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Expected list of DISCOs",
													"const expectedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Test that response is an array",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(jsonData)).to.be.true);",
													"",
													"// Test that response has all expected DISCOs",
													"pm.test(\"Response contains all expected DISCOs\", () => {",
													"    expectedDiscos.forEach(disco => {",
													"        pm.expect(jsonData).to.include(disco);",
													"    });",
													"});",
													"",
													"// Test that the length matches",
													"pm.test(\"Response array length matches expected\", () => {",
													"    pm.expect(jsonData.length).to.eql(expectedDiscos.length);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "59404bfc-4fcc-4552-a5fe-05c3191302eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "52cc7a3a-add4-4277-be5e-d777ee2dbe58",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "b4e5aee2-d481-420b-9b54-883230330f1f"
						},
						{
							"name": "Get State",
							"item": [
								{
									"name": "get list of states",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "492cb014-b5cb-4d0d-9c44-ce182e4b2124",
												"exec": [
													"// Parse response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response is an array",
													"pm.test(\"Response is an array\", () => {",
													"    pm.expect(Array.isArray(jsonData)).to.be.true;",
													"});",
													"",
													"// Validate each state object structure",
													"jsonData.forEach((stateObj, index) => {",
													"    pm.test(`State object #${index + 1} has required properties`, () => {",
													"        pm.expect(stateObj).to.have.property(\"state\");",
													"        pm.expect(stateObj).to.have.property(\"lgas\");",
													"        pm.expect(stateObj).to.have.property(\"alias\");",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'state' is a non-empty string`, () => {",
													"        pm.expect(stateObj.state).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'lgas' is a non-empty array`, () => {",
													"        pm.expect(stateObj.lgas).to.be.an(\"array\");",
													"        pm.expect(stateObj.lgas.length).to.be.greaterThan(0);",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'alias' is a non-empty string`, () => {",
													"        pm.expect(stateObj.alias).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`LGAs of state #${index + 1} are valid strings`, () => {",
													"        stateObj.lgas.forEach(lga => {",
													"            pm.expect(lga).to.be.a(\"string\").and.not.empty;",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ece67ff9-ac17-4234-a2b2-57a9289a06f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/proassest/getstates"
									},
									"response": [
										{
											"id": "ef946223-3ecb-4072-b46d-d4f710266195",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/proassest/getstates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  },\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  }\n]"
										}
									]
								}
							],
							"id": "499a6b87-41e7-471d-994a-0a53c465192c"
						}
					],
					"id": "f4876047-723f-4b12-a673-99edc117e1ab"
				},
				{
					"name": "Disco Installer Quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "discotak",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12d72d98-a688-460c-bd40-10c4d4fa303b",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"responsecode is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data is null",
													"pm.test(\"data is null\", () => {",
													"    pm.expect(jsonData.data).to.be.null;",
													"});",
													"",
													"// Validate pagination fields are numbers",
													"pm.test(\"Pagination fields are numbers\", () => {",
													"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
													"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
													"});",
													"",
													"// Validate responsemessage is a string",
													"pm.test(\"responsemessage is a string\", () => {",
													"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8b1b5bbc-2e00-45ae-86e7-7213614a6fef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/operations/discotak/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"operations",
												"discotak",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "{{disco}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "1889accf-7c71-442f-a35b-be6f4ab400f5",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/discotak/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"discotak",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 861,\n  \"responsecode\": 1687,\n  \"data\": {\n    \"region\": 1638,\n    \"csp\": 1921,\n    \"tsp\": 2453,\n    \"toalmetersupplier\": 2805\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4119,\n  \"currentpage\": 9432\n}"
										}
									]
								}
							],
							"id": "2c08ccf3-e04e-418d-9245-aee4ae1a045f",
							"description": "DISCO\n\n\\--see disco list"
						}
					],
					"id": "ba5601f6-2f3c-42ca-86c7-023c8c0d22a2"
				},
				{
					"name": "DISCO Chart",
					"item": [
						{
							"name": "discochart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43f0dac6-a4d0-41db-bd0e-2ca059c61ccf",
										"exec": [
											"// Parse JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// Test response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Test responsStatus",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Test that data is an object",
											"pm.test(\"Data is an object\", () => {",
											"    pm.expect(typeof jsonData.data).to.eql(\"object\");",
											"});",
											"",
											"// Test that all months exist and are numbers",
											"pm.test(\"All months are present and have numeric values\", () => {",
											"    const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"july\",\"aug\",\"sept\",\"oct\",\"nov\",\"dec\"];",
											"    months.forEach(month => {",
											"        pm.expect(jsonData.data).to.have.property(month);",
											"        pm.expect(jsonData.data[month]).to.be.a(\"number\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "93739a7f-e5e8-43a1-b419-6845d7888bb4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJtFPMgsawaNisR1YoOuWPdoP8LV0v0on07ayJaunQsB6vYrvDkn8O_M3PvpWqyxgzTYSkfIRLNJTEVsn_FYbeLOhas90qd8Ot2o1havUY3F4oJgChBj37wUTVB6OwUOtU4-SPHrD813fhx6IpdrtLppfJ0soGykvMftuXL6ylorhRK0XJcxknDNPN6hdFdP5L6C4eR9sLlRxnWPknBsXmZFcgQjSWhZh-vV4PZXezSiSmnNMA5paNHmbq8TBsXtYIKoDZMntbca-i8IAzkt_SbKhtV1qIZh1KWlU3MrFPrIU-TZCWb8_oZs6D0iA0Sk5MYNlUXkiUqp7cbNM8B4jZi2E2Hrhen08ADMRLX_uzk0Wd5Vv-Jqq1p3Tzuhl_l0vjUUJa9jCiJHzZVRcZZtZeD2JSqMTVdXLLCe2BFHiQgJZOzxvEA-HMFNmZQCmDIxALB94H2cgB64CpLB8InSLahcCmNhCQ-UOXS8IfpgH35GJ-xR1hlqPyKMo_99YCSqa5Lt0FthTJmAzsKUruE3IXl3eJQcTbPy8nTT1zDOfR4Ig"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/customers/discochart/{{disco}}/all/all/all/2025"
							},
							"response": []
						}
					],
					"id": "504b3266-bf45-411f-80a4-cd348117d49d"
				}
			],
			"id": "c22c46e8-3e89-40b3-95d0-4c4c973b83e2"
		},
		{
			"name": "Installation Schedules",
			"item": [
				{
					"name": "Get Contracts",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "/api/operations/supplystatus/:offset/:limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30de49c8-3d91-4cc9-9814-5f1c6371ca83",
														"exec": [
															"// Parse JSON response",
															"let jsonData = pm.response.json();",
															"",
															"// Validate response code",
															"pm.test(\"Response code is 200\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"responsStatus is true\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate data is an array",
															"pm.test(\"data is an array\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\");",
															"});",
															"",
															"// Validate totalpage and currentpage are numbers",
															"pm.test(\"Pagination values are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Validate each contract object structure",
															"jsonData.data.forEach((contract, index) => {",
															"    pm.test(`Contract ${index + 1} has required fields`, () => {",
															"        pm.expect(contract).to.have.property(\"id\");",
															"        pm.expect(contract).to.have.property(\"vendor_id\");",
															"        pm.expect(contract).to.have.property(\"vendorname\");",
															"        pm.expect(contract).to.have.property(\"contract_id\");",
															"        pm.expect(contract).to.have.property(\"contract_title\");",
															"        pm.expect(contract).to.have.property(\"meter_brand\");",
															"        pm.expect(contract).to.have.property(\"company\");",
															"        pm.expect(contract).to.have.property(\"meterphase\");",
															"        pm.expect(contract).to.have.property(\"disco\");",
															"        pm.expect(contract).to.have.property(\"quantity\");",
															"        pm.expect(contract).to.have.property(\"amount\");",
															"        pm.expect(contract).to.have.property(\"approved\");",
															"        pm.expect(contract).to.have.property(\"expected_delivery\");",
															"        pm.expect(contract).to.have.property(\"datecreated\");",
															"        pm.expect(contract).to.have.property(\"review_by\");",
															"        pm.expect(contract).to.have.property(\"endate\");",
															"        pm.expect(contract).to.have.property(\"meterinstalled\");",
															"    });",
															"});",
															"",
															"// Save the contract_id of the first object as a collection variable for the DISCO",
															"if (jsonData.data && jsonData.data.length > 0) {",
															"    pm.collectionVariables.set(\"DISCO_contract_id\", jsonData.data[0].contract_id);",
															"    console.log(\"DISCO_contract_id saved:\", jsonData.data[0].contract_id);",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "1cf8e06d-5b63-4bcf-ab2a-5c5c28d05dbe",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"supplystatus",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "c2fd931f-72a0-4453-98a7-24f57f7e44f3",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
												}
											]
										}
									],
									"id": "09c438fc-e647-472f-888b-e85e878c5ef1"
								}
							],
							"id": "0a65fe30-4ebf-40f7-9133-42b2eba7b0ae"
						}
					],
					"id": "337652e0-1be8-4b6a-8862-7e5db300185f"
				},
				{
					"name": "Get Contracts by Contracts ID",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "/api/operations/supplystatus/:offset/:limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30de49c8-3d91-4cc9-9814-5f1c6371ca83",
														"exec": [
															"// Parse JSON response",
															"let jsonData = pm.response.json();",
															"",
															"// Validate response code",
															"pm.test(\"Response code is 200\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"responsStatus is true\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate data is an array",
															"pm.test(\"data is an array\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\");",
															"});",
															"",
															"// Validate totalpage and currentpage are numbers",
															"pm.test(\"Pagination values are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Validate each contract object structure",
															"jsonData.data.forEach((contract, index) => {",
															"    pm.test(`Contract ${index + 1} has required fields`, () => {",
															"        pm.expect(contract).to.have.property(\"id\");",
															"        pm.expect(contract).to.have.property(\"vendor_id\");",
															"        pm.expect(contract).to.have.property(\"vendorname\");",
															"        pm.expect(contract).to.have.property(\"contract_id\");",
															"        pm.expect(contract).to.have.property(\"contract_title\");",
															"        pm.expect(contract).to.have.property(\"meter_brand\");",
															"        pm.expect(contract).to.have.property(\"company\");",
															"        pm.expect(contract).to.have.property(\"meterphase\");",
															"        pm.expect(contract).to.have.property(\"disco\");",
															"        pm.expect(contract).to.have.property(\"quantity\");",
															"        pm.expect(contract).to.have.property(\"amount\");",
															"        pm.expect(contract).to.have.property(\"approved\");",
															"        pm.expect(contract).to.have.property(\"expected_delivery\");",
															"        pm.expect(contract).to.have.property(\"datecreated\");",
															"        pm.expect(contract).to.have.property(\"review_by\");",
															"        pm.expect(contract).to.have.property(\"endate\");",
															"        pm.expect(contract).to.have.property(\"meterinstalled\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "e0d3c378-2c03-4134-bafe-69da9b769734",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"supplystatus",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "6d4084fe-5de4-4393-90f7-daadbee51367",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "53655837-e2d7-4ef9-832f-a3356d825c4d",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "1f188062-b98e-42e7-a15e-916d4d6a6105",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
												}
											]
										}
									],
									"id": "21ebcca0-097d-4143-a572-1b3983741e5f"
								}
							],
							"id": "cbc073fb-822a-4e4a-aa21-a532abe7e033"
						},
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "list of contracts",
													"id": "73ce94ff-c659-415b-8c0b-95016b4b211a",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:data/:offset/:limit?contract_id={{DISCO_contract_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":data",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "contract_id",
																	"value": "{{DISCO_contract_id}}"
																}
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "4d4eafad-ba0c-4ffb-ac1a-b949fec2c124",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "def5764e-2109-4401-931e-8d859fdd0992"
										}
									],
									"id": "e6df4806-ae11-4bbf-a893-4126e9f7a882"
								}
							],
							"id": "6d3074b0-cc93-4203-a505-e7114277f13f"
						}
					],
					"id": "64fa31a2-c2c2-49a4-9906-6aa3448021aa"
				},
				{
					"name": "Get a Contract's detail",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "/api/operations/supplystatus/:offset/:limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30de49c8-3d91-4cc9-9814-5f1c6371ca83",
														"exec": [
															"// Parse JSON response",
															"let jsonData = pm.response.json();",
															"",
															"// Validate response code",
															"pm.test(\"Response code is 200\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"responsStatus is true\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate data is an array",
															"pm.test(\"data is an array\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\");",
															"});",
															"",
															"// Validate totalpage and currentpage are numbers",
															"pm.test(\"Pagination values are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Validate each contract object structure",
															"jsonData.data.forEach((contract, index) => {",
															"    pm.test(`Contract ${index + 1} has required fields`, () => {",
															"        pm.expect(contract).to.have.property(\"id\");",
															"        pm.expect(contract).to.have.property(\"vendor_id\");",
															"        pm.expect(contract).to.have.property(\"vendorname\");",
															"        pm.expect(contract).to.have.property(\"contract_id\");",
															"        pm.expect(contract).to.have.property(\"contract_title\");",
															"        pm.expect(contract).to.have.property(\"meter_brand\");",
															"        pm.expect(contract).to.have.property(\"company\");",
															"        pm.expect(contract).to.have.property(\"meterphase\");",
															"        pm.expect(contract).to.have.property(\"disco\");",
															"        pm.expect(contract).to.have.property(\"quantity\");",
															"        pm.expect(contract).to.have.property(\"amount\");",
															"        pm.expect(contract).to.have.property(\"approved\");",
															"        pm.expect(contract).to.have.property(\"expected_delivery\");",
															"        pm.expect(contract).to.have.property(\"datecreated\");",
															"        pm.expect(contract).to.have.property(\"review_by\");",
															"        pm.expect(contract).to.have.property(\"endate\");",
															"        pm.expect(contract).to.have.property(\"meterinstalled\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "315062d9-9bf4-4b37-a579-132dd841ba95",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?contract_id=Friday_review_contract",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"supplystatus",
														":offset",
														":limit"
													],
													"query": [
														{
															"key": "contract_id",
															"value": "Friday_review_contract",
															"type": "text"
														}
													],
													"variable": [
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "79c69399-08ff-4342-bbef-c1971b7870d2",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
												}
											]
										}
									],
									"id": "f71ebaf7-6fb7-4954-a437-00340cf7b385"
								}
							],
							"id": "82bb24d2-d7a0-4755-add4-1509fe45ab77"
						},
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "list of contracts",
													"id": "1724ac99-1526-45c7-b5d7-3ba22d672593",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:data/:offset/:limit?contract_id={{DISCO_contract_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":data",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "contract_id",
																	"value": "{{DISCO_contract_id}}"
																}
															],
															"variable": [
																{
																	"id": "0eb07581-71ef-4534-9aff-3c37838f5e98",
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"id": "f7615e9c-9ab2-44e7-8c34-5f69adea85f5",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "fcd970fa-778c-46d0-ad69-8f650502101e",
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "11478878-cdcd-4aaf-b35f-088f34985ba3",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "0d5bfcf7-9538-4562-80a7-f98cac870055"
										}
									],
									"id": "5b5beecf-7c83-4882-bc74-205095b5e8f3"
								}
							],
							"id": "9e3d07cc-14c3-4e30-81fd-87145ce5063b"
						}
					],
					"id": "170099ab-ebe6-4a73-bf0b-4fcdc746cd8d"
				},
				{
					"name": "Schedule Upload",
					"item": [
						{
							"name": "uploadschedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4884304c-5dae-4275-b9f7-3cbe3725b2b3",
										"exec": [
											"// Parse JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// Validate response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Validate responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Validate data is null",
											"pm.test(\"data is null\", () => {",
											"    pm.expect(jsonData.data).to.be.null;",
											"});",
											"",
											"// Validate responsemessage is a string",
											"pm.test(\"responsemessage is a string\", () => {",
											"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
											"});",
											"",
											"// Validate pagination values are numbers",
											"pm.test(\"Pagination values are numbers\", () => {",
											"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
											"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cf9c9633-3705-4f92-a6a4-d4438a87e46d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"customerid\": \"20094813847\",\n        \"fullname\": \"Oya Now\",\n        \"phone_number\": \"2.38E+11\",\n        \"emaill_address\": \"john.doe@example.com\",\n        \"feeder_name\": \"34KV wuse Feeder H5\",\n        \"dt\": \"37890607\",\n        \"location\": \"minister hill\",\n        \"region\": \"FCT central\",\n        \"tsp\": \"wuse zone 1\",\n        \"csp\": \"Bwari\",\n        \"state\": \"Federal Capital Territory\",\n        \"lga\": \"Abaji\",\n        \"meter_phase\": \"Three Phase\",\n        \"address\": \"23 minister hill wuse zone 1\",\n        \"d_latitude\": \"14.65367\",\n        \"d_longitude\": \"9.0766\",\n        \"disco\": \"Abuja Electricity Distribution Company\",\n        \"contractid\": \"Friday_review_contract\"\n    },\n    {\n        \"customerid\": \"20094803211\",\n        \"fullname\": \"Tolu John\",\n        \"phone_number\": \"2.38E+11\",\n        \"emaill_address\": \"john.doe@example.com\",\n        \"feeder_name\": \"34KV wuse Feeder H6\",\n        \"dt\": \"37890608\",\n        \"location\": \"minister hill\",\n        \"region\": \"FCT central\",\n        \"tsp\": \"wuse zone 2\",\n        \"csp\": \"Bwari\",\n        \"state\": \"Federal Capital Territory\",\n        \"lga\": \"Abaji\",\n        \"meter_phase\": \"Three Phase\",\n        \"address\": \"24 minister hill wuse zone 1\",\n        \"d_latitude\": \"14.65367\",\n        \"d_longitude\": \"9.0766\",\n        \"disco\": \"Abuja Electricity Distribution Company\",\n        \"contractid\": \"Friday_review_contract\"\n    },\n    {\n        \"customerid\": \"20094792575\",\n        \"fullname\": \"Okeke Ibrahim\",\n        \"phone_number\": \"2.38E+11\",\n        \"emaill_address\": \"john.doe@example.com\",\n        \"feeder_name\": \"34KV wuse Feeder H7\",\n        \"dt\": \"37890609\",\n        \"location\": \"minister hill\",\n        \"region\": \"FCT central\",\n        \"tsp\": \"wuse zone 3\",\n        \"csp\": \"Bwari\",\n        \"state\": \"Federal Capital Territory\",\n        \"lga\": \"Abaji\",\n        \"meter_phase\": \"Three Phase\",\n        \"address\": \"25 minister hill wuse zone 1\",\n        \"d_latitude\": \"14.65367\",\n        \"d_longitude\": \"9.0766\",\n        \"disco\": \"Abuja Electricity Distribution Company\",\n        \"contractid\": \"Friday_review_contract\"\n    },\n    {\n        \"customerid\": \"20094781939\",\n        \"fullname\": \"Chibuzor Ofor\",\n        \"phone_number\": \"2.38E+11\",\n        \"emaill_address\": \"john.doe@example.com\",\n        \"feeder_name\": \"34KV wuse Feeder H8\",\n        \"dt\": \"37890606\",\n        \"location\": \"minister hill\",\n        \"region\": \"FCT central\",\n        \"tsp\": \"wuse zone 4\",\n        \"csp\": \"Bwari\",\n        \"state\": \"Federal Capital Territory\",\n        \"lga\": \"Abaji\",\n        \"meter_phase\": \"Three Phase\",\n        \"address\": \"26 minister hill wuse zone 1\",\n        \"d_latitude\": \"14.65367\",\n        \"d_longitude\": \"9.0766\",\n        \"disco\": \"Abuja Electricity Distribution Company\",\n        \"contractid\": \"Friday_review_contract\"\n    },\n    {\n        \"customerid\": \"20094771303\",\n        \"fullname\": \"Funke Uzumaki\",\n        \"phone_number\": \"2.38E+11\",\n        \"emaill_address\": \"john.doe@example.com\",\n        \"feeder_name\": \"34KV wuse Feeder H9\",\n        \"dt\": \"37890607\",\n        \"location\": \"minister hill\",\n        \"region\": \"FCT central\",\n        \"tsp\": \"wuse zone 5\",\n        \"csp\": \"Bwari\",\n        \"state\": \"Federal Capital Territory\",\n        \"lga\": \"Abaji\",\n        \"meter_phase\": \"Three Phase\",\n        \"address\": \"27 minister hill wuse zone 1\",\n        \"d_latitude\": \"14.65367\",\n        \"d_longitude\": \"9.0766\",\n        \"disco\": \"Abuja Electricity Distribution Company\",\n        \"contractid\": \"Friday_review_contract\"\n    }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/uploadschedule"
							},
							"response": [
								{
									"id": "dfaa7174-81df-489b-a0b9-51eb2ae1f57d",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"address\": \"string\",\n    \"contractid\": \"string\",\n    \"csp\": \"string\",\n    \"customerid\": \"string\",\n    \"disco\": \"string\",\n    \"dt\": \"string\",\n    \"fullname\": \"string\",\n    \"lga\": \"string\",\n    \"location\": \"string\",\n    \"meter_phase\": \"string\",\n    \"phone_number\": \"string\",\n    \"region\": \"string\",\n    \"state\": \"string\",\n    \"tsp\": \"strin\",\n    \"emaill_address\": \"string\",\n    \"feeder_name\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"d_latitude\": 8405.539443528585,\n    \"d_longitude\": 4076.305568175328\n  },\n  {\n    \"address\": \"string\",\n    \"contractid\": \"string\",\n    \"csp\": \"string\",\n    \"customerid\": \"string\",\n    \"disco\": \"string\",\n    \"dt\": \"string\",\n    \"fullname\": \"string\",\n    \"lga\": \"string\",\n    \"location\": \"string\",\n    \"meter_phase\": \"string\",\n    \"phone_number\": \"string\",\n    \"region\": \"string\",\n    \"state\": \"string\",\n    \"tsp\": \"string\",\n    \"emaill_address\": \"string\",\n    \"feeder_name\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"d_latitude\": 6490.533310537149,\n    \"d_longitude\": 9483.138786169848\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/customers/uploadschedule"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "11b1e5c0-9b27-4828-9738-2d4545f22fc3"
				},
				{
					"name": "Installation Batch by Contract",
					"item": [
						{
							"name": "installationgroupbatchbycontract",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f102c669-793c-4438-874f-758b9c646ec9",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"// Validate response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Validate responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Validate data is an array",
											"pm.test(\"data is an array\", () => {",
											"    pm.expect(jsonData.data).to.be.an(\"array\");",
											"});",
											"",
											"// Validate pagination values are numbers",
											"pm.test(\"Pagination values are numbers\", () => {",
											"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
											"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
											"});",
											"",
											"// Save the scheduleid of the first object as a collection variable",
											"if (jsonData.data && jsonData.data.length > 0) {",
											"    let scheduleId = jsonData.data[0].scheduleid;",
											"    pm.collectionVariables.set(\"disco_scheduleid\", scheduleId);",
											"    console.log(\"disco_scheduleid saved:\", scheduleId);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "235bca27-520b-47b2-989e-427eca129ac7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJsok6_VT8U5EMr-s3rJShk2Phql0DbVJVfaXoRyazwhRuTRcvssC4r0PYpzUzORxjJxjc96288LVLGZY5b1pBBBZz3-gv6tPR9prM78mAkdPEFCCFNN-y0oshwF0V90wLKaWtc8Uwxgn6vC2-1SWQFoXDX2LFE1Rc2rpyfG07J3Sc6xjrc7aTeL1AyDu15aN0J4OEJTSErbv_WLOnPt080wabZfmxeRHnlS8QwRfshMWLRD4FuDro1NBV2urLgmfdDcZuMZEzxWhdOvj0lv-O6HE5oQlxlTO6MYzI_bpAOyRJrJOFm6jFnVzqd0yJu2iToMjaT2cPWx-zcQYovu3rpjMMTkfIetHEz7DafTyEgyyiOg-QYEYTtcSJYE0mGYGVil4USP99WqHp1N3759twWBqHVfYWQ6XNlIOXfqiPxNhFI8p1t-8wBhAoGpJ8aE4ug8i8K_T0DqgeZgUerwe53MjFsXkCTC0fXgmb9P2_6OozU2ibSed4rzuHCeaGzIHIz7pNffy2Y4FT1GUN4G50SJcknf6C9rI7Pjs1oZGeq4g"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/customers/installationgroupbatchbycontract/Friday_review_contract/all/1/10"
							},
							"response": []
						}
					],
					"id": "d56b6389-f510-4cfb-8423-3d1061184a59"
				},
				{
					"name": "Get Schedule by ID",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "schedulebyid",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f1bc9017-9332-466c-bc09-5ee41c21f469",
																"exec": [
																	"// Parse response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																	"",
																	"// Validate responsecode",
																	"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																	"",
																	"// Validate responsStatus",
																	"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																	"",
																	"// Validate pagination fields",
																	"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																	"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "9bd79133-614b-4e01-94dd-77359a653fcd",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/schedulebyid/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"schedulebyid",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco_scheduleid}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "8eed58cb-c8af-456c-b8aa-4bfb060dc015",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulebyid/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulebyid",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
														}
													]
												}
											],
											"id": "2c28553d-097f-4787-ad3b-40a89ea20a02"
										}
									],
									"id": "96be6e0f-f6a9-46e1-9eb2-23077a8e95e7"
								}
							],
							"id": "7e7f38db-83d4-4347-9f67-ef486a0c763e"
						}
					],
					"id": "2b5c7c37-fe89-4673-9649-14fc449a9f89"
				}
			],
			"id": "3a377f2f-6b5e-4624-9cf6-9eae7d68a168"
		},
		{
			"name": "Installation Monitoring",
			"item": [
				{
					"name": "Disco Installation Overview",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "discoverview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d229505-979d-4b84-9aaa-1e726c083c1f",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response code",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data is an object",
													"pm.test(\"data is an object\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"object\");",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"data contains required fields\", () => {",
													"    pm.expect(jsonData.data).to.have.property(\"pending\");",
													"    pm.expect(jsonData.data).to.have.property(\"totalinstallers\");",
													"    pm.expect(jsonData.data).to.have.property(\"installationbatch\");",
													"    pm.expect(jsonData.data).to.have.property(\"meterinstalled\");",
													"    pm.expect(jsonData.data).to.have.property(\"unresolvedpercent\");",
													"});",
													"",
													"// Validate pagination values are numbers",
													"pm.test(\"Pagination values are numbers\", () => {",
													"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
													"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "24bb9da9-8819-457f-9f4b-80ed05f1e15c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/discoverview/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"discoverview",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "{{disco}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "d29aa91d-ae69-4d09-a730-ba9702d7c92d",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/discoverview/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"discoverview",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 1511,\n  \"responsecode\": 6889,\n  \"data\": {\n    \"pending\": 3955,\n    \"totalinstallers\": 4951,\n    \"installationbatch\": 6122,\n    \"meterinstalled\": 8948,\n    \"unresolvedpercent\": 3412.3496980039827\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5331,\n  \"currentpage\": 9063\n}"
										}
									]
								}
							],
							"id": "273db1d5-4b0a-4fd0-9387-0a17d17d3f07",
							"description": "DISCO\n\n\\--see disco list"
						}
					],
					"id": "26e09013-fec4-4461-84f2-6ab2a2017e15"
				},
				{
					"name": "Get Installation group batch - Pending",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{status}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "installationgroupbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35e5ddc5-fe86-40e2-8cac-5abfa0d44238",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate array is not empty",
																			"pm.test(\"data array is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate first object contains required keys",
																			"pm.test(\"first object contains required fields\", () => {",
																			"    let firstObj = jsonData.data[0];",
																			"    pm.expect(firstObj).to.have.property(\"batch\");",
																			"    pm.expect(firstObj).to.have.property(\"contract_id\");",
																			"    pm.expect(firstObj).to.have.property(\"status\");",
																			"});",
																			"",
																			"// Save first batch value as collection variable",
																			"if (jsonData.data.length > 0) {",
																			"    let batch = jsonData.data[0].batch;",
																			"    pm.collectionVariables.set(\"disco_installation_batch\", batch);",
																			"    console.log(\"Saved disco_installation_batch:\", batch);",
																			"}",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "c74e3177-8da6-4fc1-9b43-59ae3f89017f",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationgroupbatch",
																		":data",
																		":status",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batch",
																			"value": "31516202594",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "{{disco}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "status",
																			"value": "Pending",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "22f79433-25f0-4833-9268-f1173c249386",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "status"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																}
															]
														},
														{
															"name": "installationgroupbatch by ID",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f53163ef-4a66-4378-aa8c-c1f6f1960aab",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate array is not empty",
																			"pm.test(\"data array is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate first object contains required keys",
																			"pm.test(\"first object contains required fields\", () => {",
																			"    let firstObj = jsonData.data[0];",
																			"    pm.expect(firstObj).to.have.property(\"batch\");",
																			"    pm.expect(firstObj).to.have.property(\"contract_id\");",
																			"    pm.expect(firstObj).to.have.property(\"status\");",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "c458b706-987c-434e-a006-2211438d6e79",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?batch={{disco_installation_batch}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationgroupbatch",
																		":data",
																		":status",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batch",
																			"value": "{{disco_installation_batch}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "{{disco}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "status",
																			"value": "Pending",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "cf62ae49-2590-43b6-88de-ea2c4b59e530",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "status"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																}
															]
														}
													],
													"id": "c96f0bd9-71ee-4296-a2c1-dd56fd725a79"
												}
											],
											"id": "9c177f20-f52d-4507-a7ce-3ad1bb989825"
										}
									],
									"id": "dd9a9678-e700-4961-a403-6f30a6fd43e1",
									"description": "pending\n\nOngoing\n\nCompleted"
								}
							],
							"id": "674eb973-f1d6-4852-a0bd-4cc0da266462",
							"description": "Installer ID"
						}
					],
					"id": "68d7469b-2441-415a-a555-f304855ff479"
				},
				{
					"name": "Get Installation group batch - Completed",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{status}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "installationgroupbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35e5ddc5-fe86-40e2-8cac-5abfa0d44238",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data exists and is an array",
																			"pm.test(\"data exists and is an array\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"data\");",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// If data is not empty, validate first object and save batch",
																			"if (jsonData.data.length > 0) {",
																			"    let firstObj = jsonData.data[0];",
																			"",
																			"    pm.test(\"first object contains required fields\", () => {",
																			"        pm.expect(firstObj).to.have.property(\"batch\");",
																			"        pm.expect(firstObj).to.have.property(\"contract_id\");",
																			"        pm.expect(firstObj).to.have.property(\"status\");",
																			"    });",
																			"",
																			"    // Save first batch as collection variable",
																			"    let batch = firstObj.batch;",
																			"    pm.collectionVariables.set(\"disco_installation_batch\", batch);",
																			"    console.log(\"Saved disco_installation_batch:\", batch);",
																			"} else {",
																			"    console.log(\"No data found in response. Skipping variable save.\");",
																			"}",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "5532430c-291d-4e08-a8e8-053c7b3c77d0",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationgroupbatch",
																		":data",
																		":status",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batch",
																			"value": "31516202594",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "{{disco}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "status",
																			"value": "Completed",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a0455b14-ddfa-4e03-8151-18a35003a126",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "status"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																}
															]
														},
														{
															"name": "installationgroupbatch by ID",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f53163ef-4a66-4378-aa8c-c1f6f1960aab",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data exists and is an array",
																			"pm.test(\"data exists and is an array\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"data\");",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// If data is not empty, validate first object and save batch",
																			"if (jsonData.data.length > 0) {",
																			"    let firstObj = jsonData.data[0];",
																			"",
																			"    pm.test(\"first object contains required fields\", () => {",
																			"        pm.expect(firstObj).to.have.property(\"batch\");",
																			"        pm.expect(firstObj).to.have.property(\"contract_id\");",
																			"        pm.expect(firstObj).to.have.property(\"status\");",
																			"    });",
																			"",
																			"} else {",
																			"    console.log(\"No data found in response. Skipping variable save.\");",
																			"}",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "33890b7c-5f79-4fa0-a066-5063f30be936",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?batch={{disco_installation_batch}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationgroupbatch",
																		":data",
																		":status",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batch",
																			"value": "{{disco_installation_batch}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "{{disco}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "status",
																			"value": "Completed",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "8157939e-9e5b-420a-b3cc-18df2a01ecbb",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "status"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																}
															]
														}
													],
													"id": "5f986c2e-8142-41d7-a4cd-85bc7616aeb1"
												}
											],
											"id": "22b17faf-8fdc-4095-99f0-7db92ac0167b"
										}
									],
									"id": "113c9f7e-c0ea-42e0-9790-5db354c4fe50",
									"description": "pending\n\nOngoing\n\nCompleted"
								}
							],
							"id": "412f0f18-cc56-4945-9074-0008da804510",
							"description": "Installer ID"
						}
					],
					"id": "5e704206-1ebc-49f1-a76a-a263f2132e3d"
				}
			],
			"id": "9d66ba01-9d79-44dc-8aa2-61c81d41bc0a"
		},
		{
			"name": "Inventory Management",
			"item": [
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "getactivities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5739322-c06c-45a1-87e0-2b619809645a",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"// Validate responsecode",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Validate responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Validate data exists and is an array",
											"pm.test(\"data exists and is an array\", () => {",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"array\");",
											"});",
											"",
											"// Handle data when not empty",
											"if (jsonData.data.length > 0) {",
											"    let firstObj = jsonData.data[0];",
											"",
											"    pm.test(\"first activity object contains required fields\", () => {",
											"        pm.expect(firstObj).to.have.property(\"id\");",
											"        pm.expect(firstObj).to.have.property(\"activity\");",
											"        pm.expect(firstObj).to.have.property(\"party\");",
											"        pm.expect(firstObj).to.have.property(\"actby\");",
											"        pm.expect(firstObj).to.have.property(\"endate\");",
											"    });",
											"",
											"    // Save the first activity id as a collection variable",
											"    let activityId = firstObj.id;",
											"    pm.collectionVariables.set(\"disco_activity_id\", activityId);",
											"    console.log(\"Saved disco_activity_id:\", activityId);",
											"} else {",
											"    console.log(\"No activities found. Skipping variable save.\");",
											"    pm.collectionVariables.set(\"disco_activity_id\", null);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d95284da-a69d-496d-b4ca-dbdcd6d46d2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/operations/getactivities/{{disco}}/1/25"
							},
							"response": []
						},
						{
							"name": "batchmetrix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f458e6d-c447-4afb-b686-0406f77d46a0",
										"exec": [
											"// Parse JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// ✅ Validate responsecode",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// ✅ Validate responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// ✅ Validate data exists and has expected fields",
											"pm.test(\"data contains required fields\", () => {",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    let data = jsonData.data;",
											"    pm.expect(data).to.have.property(\"acceptbatch\");",
											"    pm.expect(data).to.have.property(\"acceptmeters\");",
											"    pm.expect(data).to.have.property(\"pendingbatch\");",
											"    pm.expect(data).to.have.property(\"pendingmeter\");",
											"    pm.expect(data).to.have.property(\"declinebatch\");",
											"    pm.expect(data).to.have.property(\"declinemeter\");",
											"});",
											"",
											"// ✅ Save acceptbatch as a collection variable",
											"if (jsonData.data && typeof jsonData.data.acceptbatch !== \"undefined\") {",
											"    pm.collectionVariables.set(\"disco_accept_batch\", jsonData.data.acceptbatch);",
											"    console.log(\"Saved disco_accept_batch:\", jsonData.data.acceptbatch);",
											"} else {",
											"    pm.collectionVariables.set(\"disco_accept_batch\", null);",
											"    console.log(\"acceptbatch not found. Set disco_accept_batch to null.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7d3bf0ac-5ac4-4ec3-99ed-b359763fd492",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/customers/batchmetrix/{{disco}}"
							},
							"response": []
						}
					],
					"id": "f783de9b-3c1c-4338-91af-4c01e470cce3"
				},
				{
					"name": "Meters",
					"item": [
						{
							"name": "Certified batches",
							"item": [
								{
									"name": "listmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f45d2-9bdc-4f69-a289-be37d5bbb6b6",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													"",
													"// Save the first batchid as collection variable",
													"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].batchid) {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", jsonData.data[0].batchid);",
													"    console.log(\"Saved cerified_disco_batchid:\", jsonData.data[0].batchid);",
													"} else {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", null);",
													"    console.log(\"No batchid found. Set cerified_disco_batchid to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1071369d-8d9c-45fb-a423-5d1611f92f96",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?status=Accepted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "status",
													"value": "Accepted"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "listmetrix by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e59097e-ef11-48eb-938f-d5929bc25afa",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "23314f4f-4207-43eb-a187-9b6deb6d8cec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?batchid={{cerified_disco_batchid}}&status=Accepted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "batchid",
													"value": "{{cerified_disco_batchid}}"
												},
												{
													"key": "status",
													"value": "Accepted"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "abab710a-c3b4-44e2-8a25-d410dcc1f54d"
						},
						{
							"name": "Batch metrics",
							"item": [
								{
									"name": "batchmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f458e6d-c447-4afb-b686-0406f77d46a0",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// ✅ Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// ✅ Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// ✅ Validate data exists and has expected fields",
													"pm.test(\"data contains required fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"data\");",
													"    let data = jsonData.data;",
													"    pm.expect(data).to.have.property(\"acceptbatch\");",
													"    pm.expect(data).to.have.property(\"acceptmeters\");",
													"    pm.expect(data).to.have.property(\"pendingbatch\");",
													"    pm.expect(data).to.have.property(\"pendingmeter\");",
													"    pm.expect(data).to.have.property(\"declinebatch\");",
													"    pm.expect(data).to.have.property(\"declinemeter\");",
													"});",
													"",
													"// ✅ Save acceptbatch as a collection variable",
													"if (jsonData.data && typeof jsonData.data.acceptbatch !== \"undefined\") {",
													"    pm.collectionVariables.set(\"disco_accept_batch\", jsonData.data.acceptbatch);",
													"    console.log(\"Saved disco_accept_batch:\", jsonData.data.acceptbatch);",
													"} else {",
													"    pm.collectionVariables.set(\"disco_accept_batch\", null);",
													"    console.log(\"acceptbatch not found. Set disco_accept_batch to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a055ff87-5a6d-41fe-94d9-6c6f2d2d2153",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/customers/batchmetrix/{{disco}}"
									},
									"response": []
								}
							],
							"id": "da86b172-b2fc-453d-a73e-1788e9bb4a4a"
						}
					],
					"id": "6629398d-9e84-4703-be8b-db2fa93a98bc"
				},
				{
					"name": "Ms Transfers",
					"item": [
						{
							"name": "Transfered batches - All",
							"item": [
								{
									"name": "listmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f45d2-9bdc-4f69-a289-be37d5bbb6b6",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													"",
													"// Save the first batchid as collection variable",
													"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].batchid) {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", jsonData.data[0].batchid);",
													"    console.log(\"Saved cerified_disco_batchid:\", jsonData.data[0].batchid);",
													"} else {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", null);",
													"    console.log(\"No batchid found. Set cerified_disco_batchid to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a769aaee-2abe-4f4a-a6ae-72d011b77a8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "status",
													"value": "Accepted",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "listmetrix by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e59097e-ef11-48eb-938f-d5929bc25afa",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9c654bd9-035f-4206-90ba-3d3ca753592c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?batchid={{cerified_disco_batchid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "batchid",
													"value": "{{cerified_disco_batchid}}"
												},
												{
													"key": "status",
													"value": "Accepted",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "b3f63ef3-9725-4891-ab2a-705aaa2763e1"
						},
						{
							"name": "Transfered batches - Pending",
							"item": [
								{
									"name": "listmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f45d2-9bdc-4f69-a289-be37d5bbb6b6",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													"",
													"// Save the first batchid as collection variable",
													"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].batchid) {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", jsonData.data[0].batchid);",
													"    console.log(\"Saved cerified_disco_batchid:\", jsonData.data[0].batchid);",
													"} else {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", null);",
													"    console.log(\"No batchid found. Set cerified_disco_batchid to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "aa0cbd78-f23b-452a-859f-eb9a5092bff1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?status=Pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "status",
													"value": "Pending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "listmetrix by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e59097e-ef11-48eb-938f-d5929bc25afa",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7e5c6936-39ee-4e18-8093-9bc9e5e1f8e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?batchid={{cerified_disco_batchid}}&status=Pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "batchid",
													"value": "{{cerified_disco_batchid}}"
												},
												{
													"key": "status",
													"value": "Pending"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "280da9a5-2825-40de-b1c8-017723a7bf6f"
						},
						{
							"name": "Transfered batches - Accepted",
							"item": [
								{
									"name": "listmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f45d2-9bdc-4f69-a289-be37d5bbb6b6",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													"",
													"// Save the first batchid as collection variable",
													"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].batchid) {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", jsonData.data[0].batchid);",
													"    console.log(\"Saved cerified_disco_batchid:\", jsonData.data[0].batchid);",
													"} else {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", null);",
													"    console.log(\"No batchid found. Set cerified_disco_batchid to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d61e0f26-07b9-46f7-8d5f-a7aace9d94ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?status=Accepted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "status",
													"value": "Accepted"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "listmetrix by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e59097e-ef11-48eb-938f-d5929bc25afa",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2af31fd2-1700-4fe9-8cd3-230ed53caadc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?batchid={{cerified_disco_batchid}}&status=Accepted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "batchid",
													"value": "{{cerified_disco_batchid}}"
												},
												{
													"key": "status",
													"value": "Accepted"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "2fbdc717-99f3-4548-9deb-0169f2b1c494"
						},
						{
							"name": "Transfered batches - Rejected",
							"item": [
								{
									"name": "listmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f45d2-9bdc-4f69-a289-be37d5bbb6b6",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													"",
													"// Save the first batchid as collection variable",
													"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].batchid) {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", jsonData.data[0].batchid);",
													"    console.log(\"Saved cerified_disco_batchid:\", jsonData.data[0].batchid);",
													"} else {",
													"    pm.collectionVariables.set(\"cerified_disco_batchid\", null);",
													"    console.log(\"No batchid found. Set cerified_disco_batchid to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6b0d245f-7d9e-4161-85bb-09c199d0c980",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?status=Rejected",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "status",
													"value": "Rejected"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "listmetrix by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e59097e-ef11-48eb-938f-d5929bc25afa",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data exists and has at least one item",
													"pm.test(\"Data array is not empty\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"    pm.expect(jsonData.data.length).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "26f1825e-3c7e-4712-b208-14335f1c3423",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/listmetrix/{{disco}}/1/10?batchid={{cerified_disco_batchid}}&status=Rejected",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"listmetrix",
												"{{disco}}",
												"1",
												"10"
											],
											"query": [
												{
													"key": "batchid",
													"value": "{{cerified_disco_batchid}}"
												},
												{
													"key": "status",
													"value": "Rejected"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "e2ce5187-f782-4485-bc6e-cb03935c3863"
						},
						{
							"name": "Batch metrics",
							"item": [
								{
									"name": "batchmetrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f458e6d-c447-4afb-b686-0406f77d46a0",
												"exec": [
													"// Parse JSON response",
													"let jsonData = pm.response.json();",
													"",
													"// ✅ Validate responsecode",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// ✅ Validate responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// ✅ Validate data exists and has expected fields",
													"pm.test(\"data contains required fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"data\");",
													"    let data = jsonData.data;",
													"    pm.expect(data).to.have.property(\"acceptbatch\");",
													"    pm.expect(data).to.have.property(\"acceptmeters\");",
													"    pm.expect(data).to.have.property(\"pendingbatch\");",
													"    pm.expect(data).to.have.property(\"pendingmeter\");",
													"    pm.expect(data).to.have.property(\"declinebatch\");",
													"    pm.expect(data).to.have.property(\"declinemeter\");",
													"});",
													"",
													"// ✅ Save acceptbatch as a collection variable",
													"if (jsonData.data && typeof jsonData.data.acceptbatch !== \"undefined\") {",
													"    pm.collectionVariables.set(\"disco_accept_batch\", jsonData.data.acceptbatch);",
													"    console.log(\"Saved disco_accept_batch:\", jsonData.data.acceptbatch);",
													"} else {",
													"    pm.collectionVariables.set(\"disco_accept_batch\", null);",
													"    console.log(\"acceptbatch not found. Set disco_accept_batch to null.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fa583ee4-1639-4995-ae7d-c07a3e422af3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/customers/batchmetrix/{{disco}}"
									},
									"response": []
								}
							],
							"id": "4179c3e2-6fc1-49de-ab76-bc440761a7ad"
						}
					],
					"id": "f16eb815-4b54-44af-9811-0c44a0cdcc98"
				}
			],
			"id": "c835d280-94c9-4591-b751-256330f89a62"
		},
		{
			"name": "Meter Installers",
			"item": [
				{
					"name": "Get Invited",
					"item": [
						{
							"name": "getinvited",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "202706e3-f809-4320-8527-f12c8c1f1ec7",
										"exec": [
											"// Parse the response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Check response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Check responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Check data array exists and is not empty",
											"pm.test(\"Data array is present\", () => {",
											"    pm.expect(jsonData.data).to.be.an(\"array\");",
											"});",
											"",
											"// Save the installer_number of the first installer as a collection variable",
											"if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].installer_number) {",
											"    pm.collectionVariables.set(\"disco_installer_number\", jsonData.data[0].installer_number);",
											"    console.log(\"Saved disco_installer_username:\", jsonData.data[0].installer_number);",
											"} else {",
											"    pm.collectionVariables.set(\"disco_installer_number\", null);",
											"    console.log(\"No number found. Set disco_installer_number to null.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a3d51688-14e9-4542-a875-1c8ca67fe6a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/installers/getinvited/{{disco}}/1/10?onboard=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"installers",
										"getinvited",
										"{{disco}}",
										"1",
										"10"
									],
									"query": [
										{
											"key": "onboard",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2575dbdd-aca1-445a-b01a-283dabe988bb"
				},
				{
					"name": "Get Installer by MS",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "installers getbyms",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b55b5071-833a-40a5-829c-d6c63647f8b2",
																"exec": [
																	"// Parse response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																	"",
																	"// Validate responsecode",
																	"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																	"",
																	"// Validate responsStatus",
																	"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																	"",
																	"// Validate pagination fields",
																	"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																	"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "a0dcdd0a-49b0-4875-a00e-33cec87331cc",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/installers/getbyms/:data/:offset/:limit?installer_status=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"installers",
																"getbyms",
																":data",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "installer_status",
																	"value": "true",
																	"type": "text"
																}
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "77f726b4-056d-4c0a-913f-dca1c506d2e3",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/installers/getbyms/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"installers",
																		"getbyms",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 9487,\n  \"responsecode\": 9245,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 3983,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"s\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"stri\",\n      \"jobcount\": 7917,\n      \"jobdone\": 1297,\n      \"installer_status\": false,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"2004-04-07T08:28:54.214Z\"\n    },\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 1896,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"string\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"string\",\n      \"jobcount\": 6157,\n      \"jobdone\": 2930,\n      \"installer_status\": true,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"1960-12-26T14:22:27.618Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9372,\n  \"currentpage\": 2417\n}"
														}
													]
												}
											],
											"id": "7e71070f-34b1-4aa7-8939-7ffe5af34525"
										}
									],
									"id": "e549908a-134a-4a8c-bef2-4318673546f8"
								}
							],
							"id": "ab550c12-a5d2-4f1f-a577-947920702f7f",
							"description": "Meter Supplier"
						}
					],
					"id": "00417c1b-ab1b-4ac9-ad93-630db34f4cb7"
				},
				{
					"name": "Quick Overview",
					"item": [
						{
							"name": "msinstallerquickx",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ca5dd34-4bcb-4e08-aa86-2324823877b4",
										"exec": [
											"// Parse the response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Test response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Test responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Test data object exists",
											"pm.test(\"Data object exists\", () => {",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"});",
											"",
											"// Save total as a collection variable",
											"if (jsonData.data && jsonData.data.total !== undefined) {",
											"    pm.collectionVariables.set(\"disco_total_users\", jsonData.data.total);",
											"    console.log(\"Saved disco_total_users:\", jsonData.data.total);",
											"} else {",
											"    pm.collectionVariables.set(\"disco_total_users\", null);",
											"    console.log(\"No total found. Set disco_total_users to null.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9df2bc76-e790-4f23-8211-95250cb0cb4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJjM2jB5JABUQGaCgmcGcr6YLczPtXtRzQ550xV4UOe5bZuSH-mC8Gd0egkyYjkadpn0zIEjVBbNLW_oPddz09FQNsHzAdpsnQgPIH8mGiYE1-MAQ9dchZ8MqXHPzLpOvKNGIjY3CGOxxRQA46Y9vwxQq7M0hn-bnN2sTOGxPCBCVJvSkf2YUrHSTljiJnQR5FVvgbe0ONrjKOrmQQ7epgR7nbddW4mf96zIO9Jj3jbJazIUz3ABtGwK4-ghCWVMi4VX9DrlTbeGjd-AIyOKMCc5tRIcjmCmx90rvmrRKhDw-tFyOv6hN6YmCv3BCkleTiPpeTGgkXNTXPZxJGwhyk8sSQ67UZEW0EyD9M0mk__aJKnGoQR53GzWONo-npUcGnAnpflStkUPxGW0eJbC_JvNBJjo7NU3KN4mBBxD7B8on3Uyi8SB07F5-T9Ga2ZjCCy1aZ6qiHtvVZ5Lnd2crqSiaF7Ce0H3_ZzYlunkOecqXsnFHRtFwGPOwxfK4G_l1eDcRVthsGBo4MIzbmDEmBtu8v2SkfeaIzh7v1KRo4pCA"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/installers/msinstallerquickx/{{disco}}"
							},
							"response": []
						}
					],
					"id": "9b0ea0a3-9381-4a0c-b01d-2bb9cfadbb79"
				},
				{
					"name": "Cancel Installer Invite",
					"item": [
						{
							"name": "cancelinvite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aebac6de-e003-46e9-9357-ad1f54cc7eda",
										"exec": [
											"// Parse the response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Test response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Test responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Handle data being null",
											"pm.test(\"Data can be null or an object\", () => {",
											"    pm.expect(jsonData.data === null || typeof jsonData.data === \"object\").to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49fd3068-1485-417b-af77-711f97732376",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"installernumber\": \"{{disco_installer_number}}\",\n    \"vendor\": \"Abuja Electricity Distribution Company\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/installers/cancelinvite"
							},
							"response": [
								{
									"id": "3d76c1e4-aa1e-4c84-9fc0-44a6530ae45e",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"vendor\": \"string\",\n  \"installernumber\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/installers/cancelinvite"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "ecc53aa1-0974-4277-856c-8c0c45905683"
				},
				{
					"name": "Invite Installer",
					"item": [
						{
							"name": "installerinvite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8eb5d409-083f-46dd-b1e2-95fb49d9e799",
										"exec": [
											"// Parse response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Test response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Test responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Ensure data is either null or an object/array",
											"pm.test(\"Data is null or object/array\", () => {",
											"    pm.expect(jsonData.data === null || typeof jsonData.data === \"object\").to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1d95f657-b5dd-4acd-a4a6-a17e29f083f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"alternatephone\": \"string\",\n  \"disco\": \"string\",\n  \"email\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"phonenumber\": \"string\",\n  \"vendorid\": \"string\",\n  \"middlename\": \"string\",\n  \"state\": \"string\",\n  \"lga\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/installers/installerinvite"
							},
							"response": [
								{
									"id": "83499f48-dd65-4b45-bfd3-20b637dcb6cc",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"alternatephone\": \"string\",\n  \"disco\": \"string\",\n  \"email\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"phonenumber\": \"string\",\n  \"vendorid\": \"string\",\n  \"middlename\": \"string\",\n  \"state\": \"string\",\n  \"lga\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/installers/installerinvite"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "34d2093f-e0f4-4991-8666-99938025b006"
				},
				{
					"name": "Bulk Installer Invite",
					"item": [
						{
							"name": "bulkinstallerinvite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc4d5159-4291-403b-8ea8-cebb7bd23dda",
										"exec": [
											"// Parse response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Test response code",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"// Test responsStatus is true",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Ensure data is either null or an object/array",
											"pm.test(\"Data is null or object/array\", () => {",
											"    pm.expect(jsonData.data === null || typeof jsonData.data === \"object\").to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "86d89089-5cfb-4635-9829-bec9c2b08192",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"alternatephone\": \"string\",\n    \"disco\": \"string\",\n    \"email\": \"string\",\n    \"firstname\": \"string\",\n    \"lastname\": \"string\",\n    \"phonenumber\": \"string\",\n    \"vendorid\": \"string\",\n    \"middlename\": \"string\",\n    \"state\": \"string\",\n    \"lga\": \"string\"\n  },\n  {\n    \"alternatephone\": \"string\",\n    \"disco\": \"string\",\n    \"email\": \"stri\",\n    \"firstname\": \"string\",\n    \"lastname\": \"string\",\n    \"phonenumber\": \"string\",\n    \"vendorid\": \"string\",\n    \"middlename\": \"string\",\n    \"state\": \"string\",\n    \"lga\": \"string\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/installers/bulkinstallerinvite"
							},
							"response": [
								{
									"id": "a7ab2489-edac-4cd7-a22c-3b1eef1d13e7",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"alternatephone\": \"string\",\n    \"disco\": \"string\",\n    \"email\": \"string\",\n    \"firstname\": \"string\",\n    \"lastname\": \"string\",\n    \"phonenumber\": \"string\",\n    \"vendorid\": \"string\",\n    \"middlename\": \"string\",\n    \"state\": \"string\",\n    \"lga\": \"string\"\n  },\n  {\n    \"alternatephone\": \"string\",\n    \"disco\": \"string\",\n    \"email\": \"stri\",\n    \"firstname\": \"string\",\n    \"lastname\": \"string\",\n    \"phonenumber\": \"string\",\n    \"vendorid\": \"string\",\n    \"middlename\": \"string\",\n    \"state\": \"string\",\n    \"lga\": \"string\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/installers/bulkinstallerinvite"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "1f08189d-5472-4003-8ebb-be3c2138380f"
				},
				{
					"name": "Send Mail",
					"item": [
						{
							"name": "/sendmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e61c31c-c49d-4114-aad5-d96f55121de9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"// Validate HTTP status code",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate specific message",
											"pm.test(\"Validate verification message\", () => {",
											"    pm.expect(jsonData).to.eql(\"Verification code sent!!\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6258693a-4f32-44e4-a00d-5966673c3fdf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/sendmail"
							},
							"response": [
								{
									"id": "aae08637-6f17-4097-a7b8-8012fc17da9a",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"string\",\n  \"receiver\": \"string\",\n  \"subject\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/sendmail"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								},
								{
									"id": "9a7b19a6-1912-4f3c-82ea-7dfaae2f33e3",
									"name": "/sendmail",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/sendmail"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "content-type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "date",
											"value": "Tue, 02 Sep 2025 18:18:23 GMT"
										},
										{
											"key": "server",
											"value": "Kestrel"
										},
										{
											"key": "transfer-encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "\"Verification code sent!!\""
								}
							]
						}
					],
					"id": "2f9c08db-ec81-4fac-b60c-7ddfe1373c3b"
				}
			],
			"id": "07dc79cf-e080-4b5f-87f3-d923c95d203c"
		},
		{
			"name": "Meter Engineers",
			"item": [
				{
					"name": "Meter Commission Quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "discomequick",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5954f6d-45b5-44d0-bcb9-837c91666b35",
												"exec": [
													"// Parse response JSON",
													"let jsonData = pm.response.json();",
													"",
													"// Test response code",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Test responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Ensure data is an object",
													"pm.test(\"Data is an object\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"object\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9ba06b7e-8c4f-43a5-aba8-a66bfa3bf04d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/discomequick/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"discomequick",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "{{disco}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "e2fabef1-6b80-4b7c-bcd5-7f3f6af50345",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/discomequick/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"discomequick",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 6701,\n  \"responsecode\": 8067,\n  \"data\": {\n    \"totalengineer\": 7004,\n    \"activeengineer\": 2966,\n    \"pendingonboarding\": 347,\n    \"engineeronproject\": 1988\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1196,\n  \"currentpage\": 8621\n}"
										}
									]
								}
							],
							"id": "52447adb-19c5-49d1-a2ba-87ffb572636b",
							"description": "DISCO"
						}
					],
					"id": "df499a74-e109-4f06-814c-3ae9cf998830"
				},
				{
					"name": "Meter Engineer List",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "Melist",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3d16429d-63a9-4f3e-89f0-ee87ce860bbb",
																"exec": [
																	"let jsonData = pm.response.json();",
																	"",
																	"// Tests",
																	"pm.test(\"Response code is 200\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"pm.test(\"responsStatus is true\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"pm.test(\"Data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Save first user's id and username as collection variables if data exists",
																	"if (jsonData.data && jsonData.data.length > 0) {",
																	"    let firstUser = jsonData.data[0];",
																	"    pm.collectionVariables.set(\"first_user_username\", firstUser.username || \"\");",
																	"    ",
																	"    console.log(\"Saved collection variables:\", {",
																	"        first_user_username: firstUser.username",
																	"    });",
																	"} else {",
																	"    console.log(\"No users found in data array\");",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "6c34bb90-53b6-4124-8c71-578dc5219110",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/Melist/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																"Melist",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "7f93779d-b8f0-4bab-9631-fbeeedd783aa",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/Melist/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"Melist",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6228,\n  \"responsecode\": 4617,\n  \"data\": [\n    {\n      \"fullname\": \"string\",\n      \"location\": \"string\",\n      \"pagerole\": \"string\",\n      \"username\": \"string\",\n      \"id\": 5447,\n      \"roles\": \"string\",\n      \"disco\": \"string\",\n      \"logtime\": \"2010-09-25T00:15:02.731Z\",\n      \"datejoint\": \"2002-10-28T21:54:53.526Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"1965-10-05T21:37:42.053Z\"\n    },\n    {\n      \"fullname\": \"string\",\n      \"location\": \"string\",\n      \"pagerole\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1533,\n      \"roles\": \"string\",\n      \"disco\": \"strin\",\n      \"logtime\": \"1996-10-29T08:17:20.309Z\",\n      \"datejoint\": \"1951-05-08T00:58:06.765Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-08-02T18:39:47.429Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5719,\n  \"currentpage\": 7148\n}"
														}
													]
												}
											],
											"id": "8586692a-54f2-43df-8421-ecb26d52bf2f"
										}
									],
									"id": "7f891645-0cd9-44f5-a3f2-a2b39affccf1"
								}
							],
							"id": "a05c2cf4-c3bb-4174-9ed3-5475e37ddebf",
							"description": "Disco"
						}
					],
					"id": "220a8aaf-1b8a-42ee-b941-e009de9be5f5"
				},
				{
					"name": "Cancel Meter Engineer Invite",
					"item": [
						{
							"name": "mecancelinvite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "660f5890-dc70-405e-bee5-89c0d7f403e8",
										"exec": [
											"// Parse the JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ba24cde6-555d-46e5-8012-71b4bd4ca849",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"fullname\": \"Dominic Mason\",\n    \"roles\": \"\",\n    \"username\": \"dommas@yopmail.com\",\n    \"location\": \"Madagali\",\n    \"pagerole\": \"me\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"retry\": 0,\n    \"logtime\": null,\n    \"datejoint\": \"2025-09-01T23:13:52.0584586\",\n    \"password\": null,\n    \"passcode\": null,\n    \"codevalid\": null\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/users/mecancelinvite"
							},
							"response": [
								{
									"id": "ecbc7497-bc4e-4a01-aee5-a96e25180dc4",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fullname\": \"string\",\n  \"location\": \"string\",\n  \"pagerole\": \"string\",\n  \"username\": \"string\",\n  \"id\": 3682,\n  \"roles\": \"string\",\n  \"disco\": \"string\",\n  \"logtime\": \"2013-12-09T12:16:08.045Z\",\n  \"datejoint\": \"1982-01-18T06:16:44.717Z\",\n  \"password\": \"string\",\n  \"passcode\": \"string\",\n  \"codevalid\": \"1983-07-25T03:04:22.919Z\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/users/mecancelinvite"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "350a72f7-351f-476a-98c0-b7bb1f20ff62"
				},
				{
					"name": "Invite Meter Engineer",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa77998-d51c-4ff5-9812-5ec1ea08853e",
										"exec": [
											"// Parse the JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											"",
											"// Save response message as a collection variable",
											"pm.collectionVariables.set(\"account_response_message\", jsonData.responsemessage);",
											"console.log(\"Saved account_response_message:\", jsonData.responsemessage);",
											"",
											"// Handle data if it exists",
											"if (jsonData.data) {",
											"    pm.collectionVariables.set(\"account_data\", JSON.stringify(jsonData.data));",
											"    console.log(\"Saved account_data:\", jsonData.data);",
											"} else {",
											"    console.log(\"No data to save. Response message:\", jsonData.responsemessage);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "af4ab1c1-3ca0-4bc8-877a-76328218d09e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLZaUAJqDhkyDJ8LhR2pvj8VeYC3IqAakOHMXxjRxcNKkhWPfP-u1zk4MWckFd_1DozYP8uqePzdhmGim7G27ZmqK8QkZHyDP0oG-yy82xjQ6bj8dvMhz6V8jajUCMU2IxePLqIhpEke8bItWkx2DvrDh2Z70abGodp_9Z5N_sAlq9iUBdEgkVq3BvNid1G9JtOwwCUeZlNqzKyZJwwy0UqR8zhmtTlJIgkUT_gIKUqXFd54AMdkWm5nGZne2yEv57YjkU3rFJBdXlOx-OEuyjTfS8LP7FaAP_N0QsGTBDNCqAJc_lqsbhb4BQioNiY2wVqAE71hGcbCVYogm6ENzE4FAYoH65SifJJ_JC6_BaAFwcOxATNecgtimpPVV_9iPOUM9m5a87uWbnAFXSnMJQ1_SAssEAQjMH9r12bMrvlRkRNTbkwgUgc5lqI1cvKnZQ23HuA4EPX-pXSM2X_x4wrcRHpJMyDcMxE2wgkbWWxRakkTQkHQpovGvLGMlTdQjP-n_ZfaCLqrcPNYF61Ae0spMqQpZJBpWfKbEUN_dEHkw",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullname\": \"Belle Tran\",\n    \"location\": \"wuse\",\n    \"pagerole\": \"me\",\n    \"username\": \"pejylicoxe@yopmail.com\",\n    \"disco\": \"Abuja Electricity Distribution Company\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/meinvite"
							},
							"response": []
						}
					],
					"id": "2e1461ab-5a53-47a5-a3ae-31365eb91d93"
				},
				{
					"name": "View Engineer Details",
					"item": [
						{
							"name": "medetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a5b61ad-fc10-4e0d-bd89-54890465e535",
										"exec": [
											"// Parse JSON response",
											"let jsonData = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Response code is 200\", () => {",
											"    pm.expect(jsonData.responsecode).to.eql(200);",
											"});",
											"",
											"pm.test(\"responsStatus is true\", () => {",
											"    pm.expect(jsonData.responsStatus).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6826c03c-e525-4a75-a304-9b597b55fb01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "authorization",
										"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLZaUAJqDhkyDJ8LhR2pvj8VeYC3IqAakOHMXxjRxcNKkhWPfP-u1zk4MWckFd_1DozYP8uqePzdhmGim7G27ZmqK8QkZHyDP0oG-yy82xjQ6bj8dvMhz6V8jajUCMU2IxePLqIhpEke8bItWkx2DvrDh2Z70abGodp_9Z5N_sAlq9iUBdEgkVq3BvNid1G9JtOwwCUeZlNqzKyZJwwy0UqR8zhmtTlJIgkUT_gIKUqXFd54AMdkWm5nGZne2yEv57YjkU3rFJBdXlOx-OEuyjTfS8LP7FaAP_N0QsGTBDNCqAJc_lqsbhb4BQioNiY2wVqAE71hGcbCVYogm6ENzE4FAYoH65SifJJ_JC6_BaAFwcOxATNecgtimpPVV_9iPOUM9m5a87uWbnAFXSnMJQ1_SAssEAQjMH9r12bMrvlRkRNTbkwgUgc5lqI1cvKnZQ23HuA4EPX-pXSM2X_x4wrcRHpJMyDcMxE2wgkbWWxRakkTQkHQpovGvLGMlTdQjP-n_ZfaCLqrcPNYF61Ae0spMqQpZJBpWfKbEUN_dEHkw"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users/Melist/{{disco}}/1/10?codevalid!=null&&id=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"Melist",
										"{{disco}}",
										"1",
										"10"
									],
									"query": [
										{
											"key": "codevalid!",
											"value": "null"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6f456082-45c3-4196-94e9-26d75a14b5fe"
				}
			],
			"id": "54ee42dd-349e-46fa-8c84-a4b274653672"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "User Management",
					"item": [
						{
							"name": "Invite Users",
							"item": [
								{
									"name": "registeruser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38a93eff-240e-4c2b-bd54-3a38f075422b",
												"exec": [
													"// Parse response JSON",
													"let jsonData = pm.response.json();",
													"",
													"// Test response code",
													"pm.test(\"Response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Test responsStatus is true",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Ensure data is either null or an object/array",
													"pm.test(\"Data is null or object/array\", () => {",
													"    pm.expect(jsonData.data === null || typeof jsonData.data === \"object\").to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "67c266d8-bf82-43d6-bd64-771ddd11ada2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJtFPMgsawaNisR1YoOuWPdoP8LV0v0on07ayJaunQsB6vYrvDkn8O_M3PvpWqyxgzTYSkfIRLNJTEVsn_FYbeLOhas90qd8Ot2o1havUY3F4oJgChBj37wUTVB6OwUOtU4-SPHrD813fhx6IpdrtLppfJ0soGykvMftuXL6ylorhRK0XJcxknDNPN6hdFdP5L6C4eR9sLlRxnWPknBsXmZFcgQjSWhZh-vV4PZXezSiSmnNMA5paNHmbq8TBsXtYIKoDZMntbca-i8IAzkt_SbKhtV1qIZh1KWlU3MrFPrIU-TZCWb8_oZs6D0iA0Sk5MYNlUXkiUqp7cbNM8B4jZi2E2Hrhen08ADMRLX_uzk0Wd5Vv-Jqq1p3Tzuhl_l0vjUUJa9jCiJHzZVRcZZtZeD2JSqMTVdXLLCe2BFHiQgJZOzxvEA-HMFNmZQCmDIxALB94H2cgB64CpLB8InSLahcCmNhCQ-UOXS8IfpgH35GJ-xR1hlqPyKMo_99YCSqa5Lt0FthTJmAzsKUruE3IXl3eJQcTbPy8nTT1zDOfR4Ig"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"firstname\":\"Blake\",\"lastname\":\"Lambert\",\"auth_level\":\"DISCOs\",\"fullname\":\"Blake Lambert\",\"roles\":\"Regional Admin\",\"username\":\"blakequinn@yopmail.com\",\"emailaddress\":\"blakequinn@yopmail.com\",\"pagerole\":\"1\",\"disco\":\"Abuja Electricity Distribution Company\",\"prop_scheme\":\"PMI\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/users/registeruser"
									},
									"response": [
										{
											"id": "90ce3da4-90a6-41cc-a2ee-6a8268f4a7b3",
											"name": "update activity",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
														"disabled": true
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/updateactivity"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "date",
													"value": "Tue, 02 Sep 2025 18:05:00 GMT"
												},
												{
													"key": "server",
													"value": "Kestrel"
												},
												{
													"key": "access-control-allow-origin",
													"value": "*"
												},
												{
													"key": "transfer-encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": null,\n    \"responsemessage\": \"activity saved\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 0,\n    \"currentpage\": 0\n}"
										}
									]
								}
							],
							"id": "d1cf5b8b-10a3-4200-8cf7-650457c5aedb"
						},
						{
							"name": "Get User group role",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get usergroup roles",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate that data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"    pm.expect(jsonData.data.length).to.be.above(0);",
																	"});",
																	"",
																	"// Validate required keys in each object",
																	"pm.test(\"Validate each user object has required keys\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.property(\"id\");",
																	"        pm.expect(item).to.have.property(\"usergroup\");",
																	"        pm.expect(item).to.have.property(\"role\");",
																	"    });",
																	"});",
																	"",
																	"// Validate key types and non-empty values",
																	"pm.test(\"Validate key types and non-empty values\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																	"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																	"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																	"    });",
																	"});",
																	"",
																	"// Optional: Ensure unique IDs",
																	"pm.test(\"Ensure IDs are unique\", () => {",
																	"    const ids = jsonData.data.map(item => item.id);",
																	"    const uniqueIds = new Set(ids);",
																	"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																	"});",
																	"",
																	"// Optional: Check that all roles are valid strings",
																	"pm.test(\"Validate role values are not empty\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "05305e83-550a-4eed-84ee-77d3cd266d10",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																"usergrouprole",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "9a4d7a2e-5cd7-4d30-b156-5551e0cdad54",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "c826b5b8-6faf-43de-a928-07957fb2985f",
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "a6c01bb6-bdb0-4305-9c63-ef5da5ede32c",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
														}
													]
												}
											],
											"id": "404ff382-e6b2-4aec-af34-e0c576b31d97"
										}
									],
									"id": "3da54117-338d-42b4-b552-71d104df7ad7"
								}
							],
							"id": "ac11f73c-fb26-4c50-8bb4-478af60197a7"
						},
						{
							"name": "Get Invited account",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "Metersupplier getinvite",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "683a8e66-2117-4d72-9039-2a3b3a66cb84",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Test response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Test responsStatus",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Test that data is an array",
																			"pm.test(\"Data is an array\", () => {",
																			"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
																			"});",
																			"",
																			"// Test that data array is not empty",
																			"pm.test(\"Data array is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Test structure of the first object",
																			"pm.test(\"First object has expected keys\", () => {",
																			"    if (jsonData.data.length > 0) {",
																			"        let first = jsonData.data[0];",
																			"        pm.expect(first).to.have.all.keys(",
																			"            \"id\", \"fullname\", \"username\", \"roles\", \"pagerole\", \"disco\", \"prop_scheme\",",
																			"            \"canwrite\", \"auth_level\", \"mailgoup\", \"inroles\", \"lockstatus\", \"userpresnt\",",
																			"            \"logtime\", \"datejoint\", \"password\", \"passcode\", \"codevalid\", \"retry\"",
																			"        );",
																			"    }",
																			"});",
																			"",
																			"// Optional: Check that all users have Group Admin role",
																			"pm.test(\"All users have roles as 'Group Admin'\", () => {",
																			"    jsonData.data.forEach(user => {",
																			"        pm.expect(user.roles).to.eql(\"Group Admin\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "e4f78127-07fc-4887-990f-d9fc50a5b6ef",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLZaUAJqDhkyDJ8LhR2pvj8VeYC3IqAakOHMXxjRxcNKkhWPfP-u1zk4MWckFd_1DozYP8uqePzdhmGim7G27ZmqK8QkZHyDP0oG-yy82xjQ6bj8dvMhz6V8jajUCMU2IxePLqIhpEke8bItWkx2DvrDh2Z70abGodp_9Z5N_sAlq9iUBdEgkVq3BvNid1G9JtOwwCUeZlNqzKyZJwwy0UqR8zhmtTlJIgkUT_gIKUqXFd54AMdkWm5nGZne2yEv57YjkU3rFJBdXlOx-OEuyjTfS8LP7FaAP_N0QsGTBDNCqAJc_lqsbhb4BQioNiY2wVqAE71hGcbCVYogm6ENzE4FAYoH65SifJJ_JC6_BaAFwcOxATNecgtimpPVV_9iPOUM9m5a87uWbnAFXSnMJQ1_SAssEAQjMH9r12bMrvlRkRNTbkwgUgc5lqI1cvKnZQ23HuA4EPX-pXSM2X_x4wrcRHpJMyDcMxE2wgkbWWxRakkTQkHQpovGvLGMlTdQjP-n_ZfaCLqrcPNYF61Ae0spMqQpZJBpWfKbEUN_dEHkw"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": "{{baseUrl}}/api/users/invitedaccount/{{disco}}/1/10"
															},
															"response": [
																{
																	"id": "98fb8008-9f16-45e2-94af-da5adcb6e9dc",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getinvite/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getinvite",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9668,\n  \"responsecode\": 9395,\n  \"data\": [\n    {\n      \"mailgrpup\": false,\n      \"id\": 9526,\n      \"username\": \"string\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"role\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"vendor_id\": \"string\",\n      \"datejoin\": \"1991-11-08T07:45:39.160Z\",\n      \"lastlogin\": \"2005-10-05T10:01:13.428Z\",\n      \"accountstatus\": false,\n      \"retry\": 9557,\n      \"codevalid\": \"2010-02-22T08:51:11.752Z\"\n    },\n    {\n      \"mailgrpup\": true,\n      \"id\": 9487,\n      \"username\": \"string\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"role\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"vendor_id\": \"string\",\n      \"datejoin\": \"2020-10-31T01:08:41.851Z\",\n      \"lastlogin\": \"1998-01-02T04:44:13.350Z\",\n      \"accountstatus\": false,\n      \"retry\": 3386,\n      \"codevalid\": \"1985-04-02T19:42:10.490Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6180,\n  \"currentpage\": 4210\n}"
																}
															]
														}
													],
													"id": "e4d13d6d-8af3-4fa9-8747-bd9419445400"
												}
											],
											"id": "c8b7db6c-b424-4baf-b36d-a032c1b93ee3"
										}
									],
									"id": "89ef7362-9d0b-4f6a-b696-47a6b3827b9d",
									"description": "vendor ID"
								}
							],
							"id": "960e6c75-8d69-45bd-be4a-91a4c49624bf"
						}
					],
					"id": "a185c293-5474-4124-9735-ff3841101bc6"
				},
				{
					"name": "Security",
					"item": [
						{
							"name": "Update Password",
							"item": [
								{
									"name": "update password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70dedc31-a94c-4636-b9b2-14edeb0351f9",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 200",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test that the response message indicates password was changed",
													"pm.test(\"Response message is 'Password Changed'\", function () {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Password Changed\");",
													"});",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", function () {",
													"    pm.expect(jsonData.data).to.be.null;",
													"});",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", function () {",
													"    pm.expect(jsonData.responsStatus).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b4579e73-9e40-472a-b3ea-6bdcb08f724b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "38bdf229-d12c-487a-a711-27bd2aed1daa",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "update password with same password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 400",
													"pm.test(\"Response code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test that the response message indicates password cannot be the same",
													"pm.test(\"Response message indicates cannot change to same password\", function () {",
													"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
													"});",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", function () {",
													"    pm.expect(jsonData.data).to.be.null;",
													"});",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", function () {",
													"    pm.expect(jsonData.responsStatus).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b8b5a3eb-a148-4256-886b-da929b387a24",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "ba40bf40-eee9-43cb-b081-0b29036468f7",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "validate password complexity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
												"exec": [
													"// Get the request body",
													"let body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
													"let password = body.newpassword;",
													"",
													"if (!password) {",
													"    pm.test(\"Password validation\", function () {",
													"        pm.expect.fail(\"newpassword is missing from payload\");",
													"    });",
													"} else {",
													"    let minLength = password.length >= 8;",
													"    let hasUppercase = /[A-Z]/.test(password);",
													"    let hasLowercase = /[a-z]/.test(password);",
													"    let hasNumber = /[0-9]/.test(password);",
													"    let hasSpecialChar = /[!@#$%^&*(),.?\\\":{}|<>]/.test(password);",
													"",
													"    pm.test(\"Password meets complexity requirements\", function () {",
													"        pm.expect(minLength, \"Minimum 8 characters\").to.be.true;",
													"        pm.expect(hasUppercase, \"Has uppercase\").to.be.true;",
													"        pm.expect(hasLowercase, \"Has lowercase\").to.be.true;",
													"        pm.expect(hasNumber, \"Has number\").to.be.true;",
													"        pm.expect(hasSpecialChar, \"Has special character\").to.be.true;",
													"    });",
													"}",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 400",
													"pm.test(\"Response code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test that the response message indicates password cannot be the same",
													"pm.test(\"Response message indicates cannot change to same password\", function () {",
													"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f9be40fe-d5e0-46f3-bdc2-53e1f9946b1b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "85c5942e-3eef-4519-b129-b44490398335",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "1d0252aa-7095-4dac-a4f3-15a964c13a43"
						}
					],
					"id": "e6b12552-f513-4045-a146-5c3f38980ae7"
				},
				{
					"name": "Location Management",
					"item": [
						{
							"name": "Get regions for a DISCO",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "getregions",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ec3b4d4b-7837-484e-b8f3-8ab6b6976d78",
																		"exec": [
																			"// Parse JSON response",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Test response code",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Test responsStatus",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Test data is an array",
																			"pm.test(\"Data is an array\", () => {",
																			"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
																			"});",
																			"",
																			"// Test that data has at least one object",
																			"pm.test(\"Data array is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Test structure of first object",
																			"pm.test(\"First object has expected keys\", () => {",
																			"    if (jsonData.data.length > 0) {",
																			"        let first = jsonData.data[0];",
																			"        pm.expect(first).to.have.all.keys(\"id\", \"disco\", \"region\", \"csp\", \"tsp\");",
																			"    }",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "d2ae59d3-0673-4b7f-bac9-4bdcc82a7b38",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getregions/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getregions",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "{{disco}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "8a24ead5-31e8-4f9c-ab1a-0f630204be7a",
																	"name": "OK",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/getregions/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"getregions",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2577,\n  \"responsecode\": 9733,\n  \"data\": [\n    {\n      \"csp\": \"string\",\n      \"disco\": \"string\",\n      \"region\": \"string\",\n      \"tsp\": \"string\",\n      \"id\": 7416\n    },\n    {\n      \"csp\": \"string\",\n      \"disco\": \"string\",\n      \"region\": \"string\",\n      \"tsp\": \"string\",\n      \"id\": 5258\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8145,\n  \"currentpage\": 9591\n}"
																}
															]
														}
													],
													"id": "cd3e355f-479a-4231-a4dc-1111cfb16077"
												}
											],
											"id": "1e54a6e4-645f-4cc7-a004-b5ca1785fcdf"
										}
									],
									"id": "b65e1896-f39b-4ee5-8aed-fc5bf32641e6"
								}
							],
							"id": "3cb7d52a-76e7-409d-a1f7-b3dba54c661f"
						}
					],
					"id": "5ac6fcd7-2e87-490d-b0fe-6a96a18c7947"
				}
			],
			"id": "b6e94985-7469-42e6-b893-290818fe9fd8"
		},
		{
			"name": "Save Installation Schedule",
			"item": [
				{
					"name": "save location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1a414e2-b212-4faa-acb9-424eea054749",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Top-level keys and types",
									"pm.test(\"Top-level schema is valid\", () => {",
									"    pm.expect(response).to.have.property(\"cc\").that.is.a(\"number\");",
									"    pm.expect(response).to.have.property(\"responsecode\").that.is.a(\"number\");",
									"    pm.expect(response).to.have.property(\"data\").that.satisfy(val => val === null || Array.isArray(val));",
									"    pm.expect(response).to.have.property(\"responsemessage\").that.is.a(\"string\");",
									"    pm.expect(response).to.have.property(\"patterns\").that.is.a(\"string\");",
									"    pm.expect(response).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
									"    pm.expect(response).to.have.property(\"totalpage\").that.is.a(\"number\");",
									"    pm.expect(response).to.have.property(\"currentpage\").that.is.a(\"number\");",
									"});",
									"",
									"// Optional: Validate data array schema if it's not null",
									"if (Array.isArray(response.data)) {",
									"    pm.test(\"Data array schema is valid\", () => {",
									"        response.data.forEach(item => {",
									"            pm.expect(item).to.have.property(\"property\").that.is.a(\"string\");",
									"            pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "33abe348-02cf-4719-bc52-750ec6f9c0b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"disco\": \"string\",\n    \"location\": \"string\",\n    \"id\": 7879\n  },\n  {\n    \"disco\": \"string\",\n    \"location\": \"string\",\n    \"id\": 9413\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/savelocation"
					},
					"response": [
						{
							"id": "9270cd9c-4763-4536-8e6f-0f07a06d9bf1",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"disco\": \"string\",\n    \"location\": \"string\",\n    \"id\": 7879\n  },\n  {\n    \"disco\": \"string\",\n    \"location\": \"string\",\n    \"id\": 9413\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/savelocation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "617ec992-d901-46ed-b3b2-a0074229e9b5",
			"description": "Note: The data save here will be used during schedule upload."
		},
		{
			"name": "DISCO Accepted Meters",
			"item": [
				{
					"name": "disco accept batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69dc3d5c-7ff8-4c8f-be1a-3e71fdaa0b02",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Top-level tests",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.equal(200));",
									"",
									"pm.test(\"Top-level keys exist\", () => {",
									"    const keys = [\"cc\", \"responsecode\", \"data\", \"responsemessage\", \"patterns\", \"responsStatus\", \"totalpage\", \"currentpage\"];",
									"    keys.forEach(key => pm.expect(response).to.have.property(key));",
									"});",
									"",
									"pm.test(\"Top-level values are correct type\", () => {",
									"    pm.expect(response.cc).to.be.a(\"number\");",
									"    pm.expect(response.responsecode).to.be.a(\"number\");",
									"    pm.expect(response.responsemessage).to.be.a(\"string\");",
									"    pm.expect(response.patterns).to.be.a(\"string\");",
									"    pm.expect(response.responsStatus).to.be.a(\"boolean\");",
									"    pm.expect(response.totalpage).to.be.a(\"number\");",
									"    pm.expect(response.currentpage).to.be.a(\"number\");",
									"});",
									"",
									"// Check if data is null or array",
									"pm.test(\"Data is null or an array\", () => {",
									"    pm.expect(response.data === null || Array.isArray(response.data)).to.be.true;",
									"});",
									"",
									"// Optional: If data is an array, ensure each item has required keys",
									"if (Array.isArray(response.data)) {",
									"    pm.test(\"Data items have expected keys\", () => {",
									"        response.data.forEach(item => {",
									"            pm.expect(item).to.have.property(\"property\");",
									"            pm.expect(item).to.have.property(\"name\");",
									"            pm.expect(item.property).to.be.a(\"string\");",
									"            pm.expect(item.name).to.be.a(\"string\");",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5194f902-1f43-4b5f-9bc8-1cd8d26fe310",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"meternumber\": \"string\"\n  },\n  {\n    \"meternumber\": \"string\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/discobatchaccepts"
					},
					"response": [
						{
							"id": "a965931a-bd20-45d9-8621-0912ffc4cd4c",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"meternumber\": \"string\"\n  },\n  {\n    \"meternumber\": \"string\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/discobatchaccepts"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "936522e8-9344-413f-a6ee-d6114f75a569",
			"description": "This endpoint is use for meters acceptance from MS"
		},
		{
			"name": "DISCO Meter Decline by batch",
			"item": [
				{
					"name": "disco decline batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4880fb57-da1d-4b98-b7a1-5886ce1ca505",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Top-level tests",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.equal(200));",
									"",
									"pm.test(\"Top-level keys exist\", () => {",
									"    const keys = [\"cc\", \"responsecode\", \"data\", \"responsemessage\", \"patterns\", \"responsStatus\", \"totalpage\", \"currentpage\"];",
									"    keys.forEach(key => pm.expect(response).to.have.property(key));",
									"});",
									"",
									"pm.test(\"Top-level values are correct type\", () => {",
									"    pm.expect(response.cc).to.be.a(\"number\");",
									"    pm.expect(response.responsecode).to.be.a(\"number\");",
									"    pm.expect(response.responsemessage).to.be.a(\"string\");",
									"    pm.expect(response.patterns).to.be.a(\"string\");",
									"    pm.expect(response.responsStatus).to.be.a(\"boolean\");",
									"    pm.expect(response.totalpage).to.be.a(\"number\");",
									"    pm.expect(response.currentpage).to.be.a(\"number\");",
									"});",
									"",
									"// Check if data is null or array",
									"pm.test(\"Data is null or an array\", () => {",
									"    pm.expect(response.data === null || Array.isArray(response.data)).to.be.true;",
									"});",
									"",
									"// Optional: If data is an array, ensure each item has required keys",
									"if (Array.isArray(response.data)) {",
									"    pm.test(\"Data items have expected keys\", () => {",
									"        response.data.forEach(item => {",
									"            pm.expect(item).to.have.property(\"property\");",
									"            pm.expect(item).to.have.property(\"name\");",
									"            pm.expect(item.property).to.be.a(\"string\");",
									"            pm.expect(item.name).to.be.a(\"string\");",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "36a3c281-9584-4dcc-8a23-aa1eec9388ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"message\": \"string\",\n    \"meternumber\": \"string\"\n  },\n  {\n    \"message\": \"string\",\n    \"meternumber\": \"string\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/discobatchdeclines"
					},
					"response": [
						{
							"id": "39622e4e-a06f-43f9-bf17-73f1d2d81f40",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"message\": \"string\",\n    \"meternumber\": \"string\"\n  },\n  {\n    \"message\": \"string\",\n    \"meternumber\": \"string\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/discobatchdeclines"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "af138d36-3d61-40d6-aed8-95a3b8674969",
			"description": "This endpoint accpeted of meters with decline message from DISCO.\n\nThe meters must get to the level of MS meter transfers"
		},
		{
			"name": "DISCO property Table",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "disco property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "233687f6-49c9-45f3-ac78-e5d985820cd4",
														"exec": [
															"const response = pm.response.json();",
															"",
															"// Top-level tests",
															"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.equal(200));",
															"",
															"pm.test(\"Top-level keys exist\", () => {",
															"    const keys = [\"cc\", \"responsecode\", \"data\", \"responsemessage\", \"patterns\", \"responsStatus\", \"totalpage\", \"currentpage\"];",
															"    keys.forEach(key => pm.expect(response).to.have.property(key));",
															"});",
															"",
															"pm.test(\"Top-level values are correct type\", () => {",
															"    pm.expect(response.cc).to.be.a(\"number\");",
															"    pm.expect(response.responsecode).to.be.a(\"number\");",
															"    pm.expect(response.data).to.be.an(\"array\");",
															"    pm.expect(response.responsemessage).to.be.a(\"string\");",
															"    pm.expect(response.patterns).to.be.a(\"string\");",
															"    pm.expect(response.responsStatus).to.be.a(\"boolean\");",
															"    pm.expect(response.totalpage).to.be.a(\"number\");",
															"    pm.expect(response.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Validate each item in data array",
															"pm.test(\"Data array items have 'property' and 'name'\", () => {",
															"    response.data.forEach(item => {",
															"        pm.expect(item).to.have.property(\"property\");",
															"        pm.expect(item).to.have.property(\"name\");",
															"        pm.expect(item.property).to.be.a(\"string\");",
															"        pm.expect(item.name).to.be.a(\"string\");",
															"    });",
															"});",
															"",
															"// Optional: Check counts",
															"pm.test(\"Data array length matches totalpage\", () => {",
															"    pm.expect(response.data.length).to.equal(response.totalpage);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "942bdab8-ebf9-466c-ae70-df5ec5e08ebe",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/discoproperty/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"discoproperty",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "data",
															"value": "{{disco}}",
															"description": "(Required) "
														},
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "5f359df6-bf1f-496c-9761-cd501ae72f5c",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/discoproperty/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"discoproperty",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 4915,\n  \"responsecode\": 6719,\n  \"data\": [\n    {\n      \"property\": \"string\",\n      \"name\": \"string\"\n    },\n    {\n      \"property\": \"string\",\n      \"name\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4463,\n  \"currentpage\": 6954\n}"
												}
											]
										}
									],
									"id": "b6696c84-7ab2-4624-bdcb-eb8f098fa6e5"
								}
							],
							"id": "5e77ed88-3819-4618-b874-e798c6699bd6"
						}
					],
					"id": "e257e7e1-c0fc-4aaa-8f85-e841866de940",
					"description": "DISCO\n\n\\--see disco list"
				}
			],
			"id": "0236d6c2-3fb8-4209-bee4-d8ac759b5580",
			"description": "This endpoint return data specifying the installation per TSP, CSP, Region"
		},
		{
			"name": "DISCO Region data",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "disco install region",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cbb5566-8131-430c-a07e-6b7c222495a9",
										"exec": [
											"const response = pm.response.json();",
											"",
											"// Top-level tests",
											"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.equal(200));",
											"",
											"pm.test(\"Top-level keys exist\", () => {",
											"    const keys = [\"cc\", \"responsecode\", \"data\", \"responsemessage\", \"patterns\", \"responsStatus\", \"totalpage\", \"currentpage\"];",
											"    keys.forEach(key => pm.expect(response).to.have.property(key));",
											"});",
											"",
											"pm.test(\"Top-level values are correct type\", () => {",
											"    pm.expect(response.cc).to.be.a(\"number\");",
											"    pm.expect(response.responsecode).to.be.a(\"number\");",
											"    pm.expect(response.data).to.be.an(\"array\");",
											"    pm.expect(response.responsemessage).to.be.a(\"string\");",
											"    pm.expect(response.patterns).to.be.a(\"string\");",
											"    pm.expect(response.responsStatus).to.be.a(\"boolean\");",
											"    pm.expect(response.totalpage).to.be.a(\"number\");",
											"    pm.expect(response.currentpage).to.be.a(\"number\");",
											"});",
											"",
											"// Nested data tests",
											"pm.test(\"Validate nested data structure\", () => {",
											"    response.data.forEach(region => {",
											"        pm.expect(region).to.have.property(\"region\");",
											"        pm.expect(region).to.have.property(\"propertyname\");",
											"        pm.expect(region).to.have.property(\"installed\");",
											"        pm.expect(region).to.have.property(\"pending\");",
											"        pm.expect(region).to.have.property(\"csp\").that.is.an(\"array\");",
											"",
											"        region.csp.forEach(csp => {",
											"            pm.expect(csp).to.have.property(\"installed\");",
											"            pm.expect(csp).to.have.property(\"pending\");",
											"            pm.expect(csp).to.have.property(\"propertyname\");",
											"            pm.expect(csp).to.have.property(\"propertyset\");",
											"            pm.expect(csp).to.have.property(\"tsp\").that.is.an(\"array\");",
											"",
											"            csp.tsp.forEach(tsp => {",
											"                pm.expect(tsp).to.have.property(\"installed\");",
											"                pm.expect(tsp).to.have.property(\"pending\");",
											"                pm.expect(tsp).to.have.property(\"propertyname\");",
											"                pm.expect(tsp).to.have.property(\"propertyset\");",
											"            });",
											"        });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5ffc4ff1-020a-476f-af43-bcfb3c366d34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/customers/discoinstalledregion/:data",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"customers",
										"discoinstalledregion",
										":data"
									],
									"variable": [
										{
											"key": "data",
											"value": "{{disco}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"id": "b5e06735-b538-4c7a-b7c4-1d47c7b8a929",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/discoinstalledregion/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"discoinstalledregion",
												":data"
											],
											"variable": [
												{
													"key": "data"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 6666,\n  \"responsecode\": 8527,\n  \"data\": [\n    {\n      \"region\": \"string\",\n      \"propertyname\": \"string\",\n      \"installed\": 8854,\n      \"pending\": 2466,\n      \"csp\": [\n        {\n          \"installed\": 3798,\n          \"pending\": 7597,\n          \"propertyname\": \"string\",\n          \"propertyset\": \"string\",\n          \"tsp\": [\n            {\n              \"installed\": 97,\n              \"pending\": 5080,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            },\n            {\n              \"installed\": 9245,\n              \"pending\": 6843,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            }\n          ]\n        },\n        {\n          \"installed\": 7097,\n          \"pending\": 2849,\n          \"propertyname\": \"string\",\n          \"propertyset\": \"string\",\n          \"tsp\": [\n            {\n              \"installed\": 3335,\n              \"pending\": 5273,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            },\n            {\n              \"installed\": 2006,\n              \"pending\": 4592,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"region\": \"string\",\n      \"propertyname\": \"string\",\n      \"installed\": 613,\n      \"pending\": 7731,\n      \"csp\": [\n        {\n          \"installed\": 732,\n          \"pending\": 5725,\n          \"propertyname\": \"string\",\n          \"propertyset\": \"string\",\n          \"tsp\": [\n            {\n              \"installed\": 5256,\n              \"pending\": 7719,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            },\n            {\n              \"installed\": 5889,\n              \"pending\": 3209,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            }\n          ]\n        },\n        {\n          \"installed\": 9165,\n          \"pending\": 1436,\n          \"propertyname\": \"string\",\n          \"propertyset\": \"string\",\n          \"tsp\": [\n            {\n              \"installed\": 4881,\n              \"pending\": 3961,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            },\n            {\n              \"installed\": 3822,\n              \"pending\": 6987,\n              \"propertyname\": \"string\",\n              \"propertyset\": \"string\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1185,\n  \"currentpage\": 3364\n}"
								}
							]
						}
					],
					"id": "05436cde-afd1-40d6-9cd0-3c9048e32a7c",
					"description": "DISCO\n\n\\--see disco list"
				}
			],
			"id": "6a1c646d-34f4-4566-b7e3-241839838fd8",
			"description": "This endpoint return installation status for each region and a specific DISCO"
		},
		{
			"name": "DISCO Installation Tracking",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{query}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "discotrack",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a7a899f6-0670-4b3b-9b57-ad80e370fd68",
																"exec": [
																	"// Parse the response body",
																	"const response = pm.response.json();",
																	"",
																	"// Test status code",
																	"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.equal(200));",
																	"",
																	"// Test response structure",
																	"pm.test(\"Response has all expected keys\", () => {",
																	"    const expectedKeys = [",
																	"        \"cc\",",
																	"        \"responsecode\",",
																	"        \"data\",",
																	"        \"responsemessage\",",
																	"        \"patterns\",",
																	"        \"responsStatus\",",
																	"        \"totalpage\",",
																	"        \"currentpage\"",
																	"    ];",
																	"    expectedKeys.forEach(key => pm.expect(response).to.have.property(key));",
																	"});",
																	"",
																	"// Test specific values and types",
																	"pm.test(\"Response values are correct\", () => {",
																	"    pm.expect(response.cc).to.equal(0);",
																	"    pm.expect(response.responsecode).to.equal(200);",
																	"    pm.expect(response.data).to.be.an(\"array\");",
																	"    pm.expect(response.responsemessage).to.be.a(\"string\");",
																	"    pm.expect(response.patterns).to.be.a(\"string\");",
																	"    pm.expect(response.responsStatus).to.be.a(\"boolean\");",
																	"    pm.expect(response.totalpage).to.be.a(\"number\");",
																	"    pm.expect(response.currentpage).to.equal(1);",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "938678bf-c3ec-4999-b30b-a3c42373cc3f",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/discotrack/:data/:query/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"discotrack",
																":data",
																":query",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{disco}}",
																	"description": "(Required) "
																},
																{
																	"key": "query",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "c688fa70-ebd3-4ae4-9ee4-00b3df509663",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/discotrack/:data/:query/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"discotrack",
																		":data",
																		":query",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "query"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 9116,\n  \"responsecode\": 7929,\n  \"data\": [\n    {\n      \"pending\": 6863,\n      \"installed\": 174,\n      \"pendingmeters\": 5055,\n      \"installedmeter\": 541,\n      \"region\": \"string\",\n      \"query\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"disco\": \"string\"\n    },\n    {\n      \"pending\": 9805,\n      \"installed\": 1647,\n      \"pendingmeters\": 5935,\n      \"installedmeter\": 4159,\n      \"region\": \"string\",\n      \"query\": \"string\",\n      \"csp\": \"st\",\n      \"tsp\": \"string\",\n      \"disco\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 7776,\n  \"currentpage\": 5341\n}"
														}
													]
												}
											],
											"id": "bf2e5fdc-61f1-4df0-8245-ddd197018330"
										}
									],
									"id": "9bd00b58-c747-465b-8fa2-ea4b135a2adc"
								}
							],
							"id": "3cfd6eb6-90b2-4a42-a017-e3c1a602dc7a",
							"description": "All\n\nCSP\n\nTSP\n\n\\--check get disco get region"
						}
					],
					"id": "34e95434-2e0c-4df9-9c2a-4ea25992a1cd",
					"description": "DISCO\n\n\\--see disco list"
				}
			],
			"id": "c1d327d1-346b-4d07-b1d7-4485482c1335",
			"description": "This endpoint return statistic of installed and pending schedule"
		},
		{
			"name": "DISCO Accept MS Meters",
			"item": [
				{
					"name": "/api/customers/discobatchaccept",
					"id": "6f90ec66-a802-4a34-9ecf-a094e83cad33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/discobatchaccept"
					},
					"response": [
						{
							"id": "af5be922-0835-4428-a78c-c451822e7be5",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/discobatchaccept"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "98f64182-f4d6-49c1-b5a3-2c13529239c1"
		},
		{
			"name": "DISCO Decline MS Meters",
			"item": [
				{
					"name": "discobatchdecline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a29fe7f5-f4d1-44da-9a07-d831ba858de9",
								"exec": [
									"// Parse JSON response",
									"let jsonData = pm.response.json();",
									"",
									"// Test response code",
									"pm.test(\"Response code is 200\", () => {",
									"    pm.expect(jsonData.responsecode).to.eql(200);",
									"});",
									"",
									"// Test responsStatus",
									"pm.test(\"responsStatus is true\", () => {",
									"    pm.expect(jsonData.responsStatus).to.eql(true);",
									"});",
									"",
									"// Test that data is null",
									"pm.test(\"Data is null\", () => {",
									"    pm.expect(jsonData.data).to.be.null;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1fa15f12-39a0-4ffe-a9c3-e6f7e778bf6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/discobatchdecline"
					},
					"response": [
						{
							"id": "bd6010bd-906c-48cd-adf5-ff23982760b9",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/discobatchdecline"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "e7e0612b-46b8-449b-b458-a4c4b3ba6036"
		},
		{
			"name": "Save Region for DISCO",
			"item": [
				{
					"name": "saveregions",
					"id": "fa1858c8-2007-4857-ab3d-e31168a6fe1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"csp\": \"string\",\n    \"disco\": \"string\",\n    \"region\": \"string\",\n    \"tsp\": \"string\",\n    \"id\": 791\n  },\n  {\n    \"csp\": \"string\",\n    \"disco\": \"string\",\n    \"region\": \"string\",\n    \"tsp\": \"string\",\n    \"id\": 8978\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/operations/saveregions"
					},
					"response": [
						{
							"id": "69099bcf-5542-4220-a01f-2a51ad9e73d3",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"csp\": \"string\",\n    \"disco\": \"string\",\n    \"region\": \"string\",\n    \"tsp\": \"string\",\n    \"id\": 791\n  },\n  {\n    \"csp\": \"string\",\n    \"disco\": \"string\",\n    \"region\": \"string\",\n    \"tsp\": \"string\",\n    \"id\": 8978\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/saveregions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "1323c291-3297-4062-b480-fef0b7cc760c"
		},
		{
			"name": "Delete Region for a DISCO",
			"item": [
				{
					"name": "deletegions",
					"id": "87557aae-4332-4d45-9463-9d8f309837c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"csp\": \"string\",\n  \"disco\": \"string\",\n  \"region\": \"string\",\n  \"tsp\": \"string\",\n  \"id\": 3803\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/operations/deletegions"
					},
					"response": [
						{
							"id": "5855567b-8029-4dd1-a929-510053f6afd7",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"csp\": \"string\",\n  \"disco\": \"string\",\n  \"region\": \"string\",\n  \"tsp\": \"string\",\n  \"id\": 3803\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/deletegions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "4d50badb-5ebd-43b6-b0a1-33ae9c840933"
		},
		{
			"name": "Get Customer's Installation Schedule",
			"item": [
				{
					"name": "{batch}",
					"item": [
						{
							"name": "{vendor}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "installationschedulebatch",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9619d258-6c85-40fc-bdea-0fe3d1360216",
																"exec": [
																	"// Parse response JSON",
																	"let jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", function () {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", function () {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate first item in data if available",
																	"if (jsonData.data.length > 0) {",
																	"    let item = jsonData.data[0];",
																	"",
																	"    pm.test(\"Validate id is a number\", function () {",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate fullname is a string\", function () {",
																	"        pm.expect(item.fullname).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate customerid is a string\", function () {",
																	"        pm.expect(item.customerid).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate phone_number is a string\", function () {",
																	"        pm.expect(item.phone_number).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate emaill_address is a string\", function () {",
																	"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate schedule_id is a string\", function () {",
																	"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate installation_status is a string\", function () {",
																	"        pm.expect(item.installation_status).to.be.a(\"string\");",
																	"    });",
																	"",
																	"    pm.test(\"Validate installationstatus is a boolean\", function () {",
																	"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																	"    });",
																	"",
																	"    // Save schedule_id as a collection variable",
																	"    pm.collectionVariables.set(\"pending-installbatchid\", item.schedule_id);",
																	"}",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", function () {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "28d12efb-f346-4101-8f34-26403a38e795",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/installationschedulebatch/:batch/:vendor/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"installationschedulebatch",
																":batch",
																":vendor",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "59b11e42-6d54-40b4-a9a6-1a990d43a2b8",
																	"key": "batch",
																	"value": "{{pending-installbatchid}}",
																	"description": "(Required) "
																},
																{
																	"id": "ab33f15e-9d8a-432f-afce-a4c3167a1604",
																	"key": "vendor",
																	"value": "Mita",
																	"description": "(Required) "
																},
																{
																	"id": "dd049d07-7099-4444-a280-35ad9bd9ce23",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "2614e242-ada5-4a4c-9def-27879df9dc1d",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "d056448d-36c5-436a-a467-49058c22f333",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationschedulebatch/:batch/:vendor/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationschedulebatch",
																		":batch",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "batch"
																		},
																		{
																			"key": "vendor"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
														}
													]
												}
											],
											"id": "807cdef1-96e5-463c-b975-2ce85be70d75"
										}
									],
									"id": "e48891ab-09a9-41f1-b656-0fef4483d5e7"
								}
							],
							"id": "d02e9043-634c-40ff-8444-6fd0c9954feb",
							"description": "vendor id"
						}
					],
					"id": "56bc6c73-12d6-4f27-885e-6689b46c2cf9",
					"description": "Installation batch"
				},
				{
					"name": "Get Meter Installer for a DISCO",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{disco}",
									"item": [
										{
											"name": "installermsdisco",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "caae9687-7559-4725-894c-28ea2715bd31",
														"exec": [
															"// Parse response JSON",
															"let jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", function () {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate data is an array",
															"pm.test(\"Validate data is an array\", function () {",
															"    pm.expect(jsonData.data).to.be.an(\"array\");",
															"});",
															"",
															"// Validate data is empty",
															"pm.test(\"Validate data is empty\", function () {",
															"    pm.expect(jsonData.data.length).to.eql(0);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", function () {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "c59ce4eb-a21a-4d19-9f34-b3f4e317fffe",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/installers/installermsdisco/:data/:disco",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"installers",
														"installermsdisco",
														":data",
														":disco"
													],
													"variable": [
														{
															"id": "d4529566-eb70-4ba8-9409-6b4f4bc0e5dd",
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														},
														{
															"id": "60d84433-d7de-4985-9c28-9af2aed11303",
															"key": "disco",
															"value": "Abuja Electricity Distribution Company",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "61a77c24-b522-415f-aae3-543c937769bf",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/installers/installermsdisco/:data/:disco",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"installers",
																"installermsdisco",
																":data",
																":disco"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "disco"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 9487,\n  \"responsecode\": 9245,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 3983,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"s\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"stri\",\n      \"jobcount\": 7917,\n      \"jobdone\": 1297,\n      \"installer_status\": false,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"2004-04-07T08:28:54.214Z\"\n    },\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 1896,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"string\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"string\",\n      \"jobcount\": 6157,\n      \"jobdone\": 2930,\n      \"installer_status\": true,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"1960-12-26T14:22:27.618Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9372,\n  \"currentpage\": 2417\n}"
												}
											]
										}
									],
									"id": "1ffdfe28-732f-471e-97e2-06c47a6739eb",
									"description": "DSICO"
								}
							],
							"id": "9a220858-8d98-4ca6-81c8-b6cea438a8d8",
							"description": "Vendor ID"
						}
					],
					"id": "38e80b9c-ce6c-4a2e-88d5-a0baacfd36d7"
				}
			],
			"id": "1c868fe0-fc28-4c8e-a64e-558b355156ef"
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "logout",
					"id": "2fecca55-1154-4ffb-a9ad-66e805bf7cf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/authentication/logout"
					},
					"response": [
						{
							"id": "d725bdd6-e38a-4be5-9b7c-f74a369ec976",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/authentication/logout"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "d7bdfb87-6f7d-47fa-a50d-bfc3a0ec302e"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{disco-token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "942b367b-da94-4167-86b5-744b48fcb989",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3589a0e7-3a71-4dff-8fe0-596c8a122f99",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "disco",
			"value": ""
		},
		{
			"key": "disco-token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://appmodule.delightfulgrass-0dcdf3e6.brazilsouth.azurecontainerapps.io",
			"type": "string"
		}
	]
}